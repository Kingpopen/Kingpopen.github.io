<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo 图片加载不能正常显示</title>
      <link href="/2022/05/27/hexo-tu-pian-jia-zai-bu-neng-zheng-chang-xian-shi/"/>
      <url>/2022/05/27/hexo-tu-pian-jia-zai-bu-neng-zheng-chang-xian-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>最近在使用hexo + matery主题来搭建自己的博客，记录一下出现的问题。</p><p>hexo的matery主题链接：<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p><p>里面有相应的中文使用教程，还是比较详细的。</p><p>我的hexo版本是6.0.0</p></blockquote><h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>我在用Typora写相关博客的md文件时，需要插入相关的图片，我按照网上的方法都是：</p><ul><li>在根目录下的_config.yaml文件中将”post_asset_folder”设为:true</li><li>npm安装转化图片路径的工具包：npm install hexo-asset-image –save</li><li>Typora中使用！[]（）传入对应的图片文件名</li></ul></blockquote><p>我按照上述步骤尝试之后发现图片还是不能够正常的显示出来，我的Typora是按照规范写的图片名，但是博客就是不能展示图片:</p><img src="2.png" alt="图1 Typora代码图" style="zoom:50%;"><img src="1.png" alt="图2 bug图" style="zoom:67%;"><h3 id="二、问题原因"><a href="#二、问题原因" class="headerlink" title="二、问题原因"></a>二、问题原因</h3><ul><li><p>按F12查看当前网页的 img 标签的里面的url是什么？</p><blockquote><p>我发现url解析成了：/kingpopen.github.io/2022/05/27/new-blog/pic.jpg</p><p><strong>难怪</strong>不能正常的展示图片~</p><p>说明hexo-asset-image这个工具包在帮助我解析typora中写的图片路径的时候出了问题。</p></blockquote><img src="3.png" alt="图3 F12的img标签图" style="zoom:100%;"></li><li><p>查看hexo-assert-image中到底写了些什么？</p><blockquote><p>hexo-assert-image就放在:根目录\node_modules\hexo-asset-image 里面</p><p>打开其中的index.js文件，发现写了一堆代码，比较关键的代码是：</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>可以发现最后的img的src路径是由confg.root, link, src, 这三部分组成，我将这三部分打印输出，得到的结果是：</p></blockquote><img src="4.png" alt="图4 打印输出图" style="zoom:50%;"><blockquote><p>原来就是这几样东西组成我最后的src~</p><p>看来问题就是出在了hexo-asset-image包的index.js文件里面，它解析方式有一些问题。</p></blockquote></li><li><p>最后查了一些博客，发现大家安装的hexo-asset-img版本主要是下面这两个：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 高版本的hexo 不要安装下面这两类包</span><span class="token number">1.</span> npm install https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>CodeFalling<span class="token operator">/</span>hexo<span class="token operator">-</span>asset<span class="token operator">-</span>image <span class="token operator">--</span>save<span class="token number">2.</span> npm install https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>7ym0n<span class="token operator">/</span>hexo<span class="token operator">-</span>asset<span class="token operator">-</span>image <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>我看到这两个版本的发行时间都是比较早，大概2018年左右。现在我使用的hexo版本是6.0.0的，估计是因为hexo的版本更新了，但是hexo-asset-image的版本没有进行维护，导致了错误的出现。</p></blockquote></li></ul><h3 id="三、解决方法"><a href="#三、解决方法" class="headerlink" title="三、解决方法"></a>三、解决方法</h3><blockquote><p>最后找到一篇博客，这个老哥自己改进了hexo-asset-img，并且开源了，我安装他自己改的hexo-asset-img版本，就解决了这个问题。</p></blockquote><p>​ <strong>注意一下之前的包叫：hexo-asset-image, 这个老哥的包叫:hexo-asset-img</strong></p><blockquote><p>博客：<a href="https://cloud.tencent.com/developer/article/1970544">https://cloud.tencent.com/developer/article/1970544</a></p><p>github：<a href="https://github.com/yiyungent/hexo-asset-img">https://github.com/yiyungent/hexo-asset-img</a></p></blockquote><ul><li>方法一：重新安装正确的hexo-asset-img版本（推荐）</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 先卸载之前的hexo-asset-image 版本</span>npm uninstall hexo<span class="token operator">-</span>asset<span class="token operator">-</span>image<span class="token comment">// 再选择正确的版本安装</span>npm install hexo<span class="token operator">-</span>asset<span class="token operator">-</span>img<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>方法二：直接修改hexo-asset-image中的index.js文件</p><blockquote><p>因为有的时候github的网速比较慢，npm install安装可能安装不成功，就直接将：<a href="https://github.com/yiyungent/hexo-asset-img">https://github.com/yiyungent/hexo-asset-img</a> 中的index.js文件的内容拷贝，然后替换自己项目中hexo-asset-image中的index.js的内容就好了。</p></blockquote></li></ul><p>至此，该问题就成功解决了，效果如下所示：</p><img src="5.png" alt="图5 效果图" style="zoom:;"><p><strong>注：如果存放图片的文件夹名称是中文，Typora中的！[]（）中图片图片路径就不要加文件夹名了，直接使用图片名称，不然还是会出现不能显示的问题！</strong></p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><blockquote><p>​        这是我自己第一次使用github来搭建博客，其中也遇到了一些问题，就属这个问题花的时间比较长，好在最后成功解决了。如果有其他朋友遇到这类问题，希望对你们有所帮助! 😄</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2022/05/27/di-yi-pian-bo-ke/"/>
      <url>/2022/05/27/di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>之前都是在CSDN和知乎上写博客，现在开始自己使用github来搭建一个博客网站，<br>这是我使用hexo搭建的博客开始写的一个博客！<br>全新的开始~</p><p>🤪</p></blockquote><p><img src="1.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maskrcnn-benchmark-master（十）：box_head的loss文件</title>
      <link href="/2021/08/03/maskrcnn-benchmark-master-shi-box-head-de-loss-wen-jian/"/>
      <url>/2021/08/03/maskrcnn-benchmark-master-shi-box-head-de-loss-wen-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>上一篇博客已经介绍完box_head的inference文件，我们知道了box_head在inference阶段是如何进行筛选box(Proposals)，最后得到输出的instances结果，本篇博客将介绍在box_head阶段的loss是如何进行计算的，有了前面RPN的loss文件介绍，box_head的loss文件介绍将会简单很多，它涉及到的函数和RPN的loss文件基本是类似的。</p></blockquote><h3 id="一、make-roi-box-loss-evaluator-函数"><a href="#一、make-roi-box-loss-evaluator-函数" class="headerlink" title="一、make_roi_box_loss_evaluator()函数"></a>一、make_roi_box_loss_evaluator()函数</h3><blockquote><p>box_head的计算loss相关操作在your_project/maskrcnn_benchmark/modeling/roi_heads/box_head/loss.py文件中，我们首先来看看make_roi_box_loss_evaluator()这个函数：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_roi_box_loss_evaluator</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 匹配器 用于给RPN输出给ROI_head部分的Proposals分配真实的标签</span>    matcher <span class="token operator">=</span> Matcher<span class="token punctuation">(</span>        cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>ROI_HEADS<span class="token punctuation">.</span>FG_IOU_THRESHOLD<span class="token punctuation">,</span>        cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>ROI_HEADS<span class="token punctuation">.</span>BG_IOU_THRESHOLD<span class="token punctuation">,</span>        allow_low_quality_matches<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token comment"># box的编解码器</span>    bbox_reg_weights <span class="token operator">=</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>ROI_HEADS<span class="token punctuation">.</span>BBOX_REG_WEIGHTS    box_coder <span class="token operator">=</span> BoxCoder<span class="token punctuation">(</span>weights<span class="token operator">=</span>bbox_reg_weights<span class="token punctuation">)</span>    <span class="token comment"># 在box_head预测得到的Proposals中筛选正负样本用于训练</span>    fg_bg_sampler <span class="token operator">=</span> BalancedPositiveNegativeSampler<span class="token punctuation">(</span>        cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>ROI_HEADS<span class="token punctuation">.</span>BATCH_SIZE_PER_IMAGE<span class="token punctuation">,</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>ROI_HEADS<span class="token punctuation">.</span>POSITIVE_FRACTION    <span class="token punctuation">)</span>    <span class="token comment"># 这个不管它！</span>    cls_agnostic_bbox_reg <span class="token operator">=</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>CLS_AGNOSTIC_BBOX_REG    <span class="token comment"># 损失的计算  用于计算整个box_head部分的loss</span>    loss_evaluator <span class="token operator">=</span> FastRCNNLossComputation<span class="token punctuation">(</span>        matcher<span class="token punctuation">,</span>        fg_bg_sampler<span class="token punctuation">,</span>        box_coder<span class="token punctuation">,</span>        cls_agnostic_bbox_reg    <span class="token punctuation">)</span>     <span class="token keyword">return</span> loss_evaluator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这部分代码是不是跟<strong>RPN中loss文件</strong>很相似，不能说相似，简直一模一样~，因为RPN的输出是Proposals，这些Proposals是作为ROI_heads的一个输入，但是在训练阶段，box_head部分将对这些Proposals选一部分用作训练，作为box_head的输入。</p><p>从上面代码中可以看出，整个函数主要由三个类的对象构成，这三个类分别是：</p><p><strong>Matcher类</strong>：这个类主要是给RPN输出的Proposals分配对应类别标签的。<br><strong>BalancedPositiveNegativeSampler类</strong>：用于筛选上述的哪些Proposals可以当作正负样本用于计算loss的过程。<br><strong>FastRCNNLossComputation</strong>：用于给筛选（和inference阶段筛选机制不一样）过后得到的Proposals计算其对应的loss。</p><p>因为<strong>Match类</strong>和<strong>BalancedPositiveNegativeSampler类</strong>已经在：</p><p>maskrcnn-benchmark-master（六）：RPN的loss文件</p><p>介绍过了，所以本篇只着重介绍<strong>FastRCNNLossComputation类</strong>。</p></blockquote><h3 id="二、FastRCNNLossComputation"><a href="#二、FastRCNNLossComputation" class="headerlink" title="二、FastRCNNLossComputation"></a>二、FastRCNNLossComputation</h3><blockquote><p>在FastRCNNLossComputation类中主要包含有五个函数，它们分别是：<strong>init</strong>()函数、match_targets_to_proposals()函数、prepare_targets()函数、subsample()函数、<strong>call</strong>()函数，它们之间的简单调用关系如下图所示：</p></blockquote><p><img src="1.jpg" alt="图1 调用关系图"></p><h4 id="1、init-函数"><a href="#1、init-函数" class="headerlink" title="1、init()函数"></a>1、<strong>init</strong>()函数</h4><blockquote><p>我们首先看一下__init__()函数：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">FastRCNNLossComputation</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Computes the loss for Faster R-CNN.    Also supports FPN    对Faster-RCNN部分的loss进行计算    """</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>        self<span class="token punctuation">,</span>        proposal_matcher<span class="token punctuation">,</span>        fg_bg_sampler<span class="token punctuation">,</span>        box_coder<span class="token punctuation">,</span>        cls_agnostic_bbox_reg<span class="token operator">=</span><span class="token boolean">False</span>    <span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Arguments:            proposal_matcher (Matcher)            fg_bg_sampler (BalancedPositiveNegativeSampler)            box_coder (BoxCoder)        """</span>        <span class="token comment"># 定义用于Proposals标签匹配的 匹配器</span>        self<span class="token punctuation">.</span>proposal_matcher <span class="token operator">=</span> proposal_matcher        <span class="token comment"># 定义用于正负样本筛选的 筛选器</span>        self<span class="token punctuation">.</span>fg_bg_sampler <span class="token operator">=</span> fg_bg_sampler        <span class="token comment"># 定义box的编解码器</span>        self<span class="token punctuation">.</span>box_coder <span class="token operator">=</span> box_coder        self<span class="token punctuation">.</span>cls_agnostic_bbox_reg <span class="token operator">=</span> cls_agnostic_bbox_reg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、match-targets-to-proposals-函数"><a href="#2、match-targets-to-proposals-函数" class="headerlink" title="2、match_targets_to_proposals()函数"></a>2、match_targets_to_proposals()函数</h4><blockquote><p><strong>init</strong>()函数主要是定义相关的类变量，没有什么好介绍的，下面来看一下match_targets_to_proposals()函数：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">match_targets_to_proposals</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> proposal<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># gt 和 RPN输出的Proposals之间的 IOU矩阵</span>    match_quality_matrix <span class="token operator">=</span> boxlist_iou<span class="token punctuation">(</span>target<span class="token punctuation">,</span> proposal<span class="token punctuation">)</span>     <span class="token comment"># 预测边框和对应的gt的索引， 背景边框为-2 ， 模糊边框为-1 </span>    <span class="token comment"># eg:matched_idxs[4] = 6 :表示第5个预测边框所分配的GT的id为6</span>    matched_idxs <span class="token operator">=</span> self<span class="token punctuation">.</span>proposal_matcher<span class="token punctuation">(</span>match_quality_matrix<span class="token punctuation">)</span>    <span class="token comment"># Fast RCNN only need "labels" field for selecting the targets、</span>    <span class="token comment"># 获得 GT 的类别标签</span>    target <span class="token operator">=</span> target<span class="token punctuation">.</span>copy_with_fields<span class="token punctuation">(</span><span class="token string">"labels"</span><span class="token punctuation">)</span>    <span class="token comment"># get the targets corresponding GT for each proposal</span>    <span class="token comment"># NB: need to clamp the indices because we can have a single</span>    <span class="token comment"># GT in the image, and matched_idxs can be -2, which goes</span>    <span class="token comment"># out of bounds</span>     <span class="token comment"># 将所有的背景边框和模糊边框的标签都对应成第一个gt的标签</span>    <span class="token comment"># 其实就是将target中的box 和label按照Proposals的对应顺序重新排序的一个过程，</span>    <span class="token comment"># 将target中box顺序和matched_idxs中的GT的id顺序保持一致</span>    matched_targets <span class="token operator">=</span> target<span class="token punctuation">[</span>matched_idxs<span class="token punctuation">.</span>clamp<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment"># 将对应的列表索引添加至gt列表中</span>    matched_targets<span class="token punctuation">.</span>add_field<span class="token punctuation">(</span><span class="token string">"matched_idxs"</span><span class="token punctuation">,</span> matched_idxs<span class="token punctuation">)</span>    <span class="token keyword">return</span> matched_targets<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、prepare-targets-函数"><a href="#3、prepare-targets-函数" class="headerlink" title="3、prepare_targets()函数"></a>3、prepare_targets()函数</h4><blockquote><p>由此我们可以看出match_targets_to_proposals()函数返回的是一个BoxList对象，这个对象中的box是Proposals所对应的GT的box，labels是Proposals所对应GT的label。</p><p>接下来我们开看看prepare_targets()函数:</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 准备类别标签和box偏移量标签</span>    <span class="token keyword">def</span> <span class="token function">prepare_targets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> proposals<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 类别标签列表</span>        labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 回归box标签列表</span>        regression_targets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 分别对每一张图片进行操作</span>        <span class="token keyword">for</span> proposals_per_image<span class="token punctuation">,</span> targets_per_image <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>proposals<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">:</span>            matched_targets <span class="token operator">=</span> self<span class="token punctuation">.</span>match_targets_to_proposals<span class="token punctuation">(</span>                proposals_per_image<span class="token punctuation">,</span> targets_per_image            <span class="token punctuation">)</span>            matched_idxs <span class="token operator">=</span> matched_targets<span class="token punctuation">.</span>get_field<span class="token punctuation">(</span><span class="token string">"matched_idxs"</span><span class="token punctuation">)</span>            <span class="token comment"># 获取每一个target所对应的label标签</span>            labels_per_image <span class="token operator">=</span> matched_targets<span class="token punctuation">.</span>get_field<span class="token punctuation">(</span><span class="token string">"labels"</span><span class="token punctuation">)</span>            labels_per_image <span class="token operator">=</span> labels_per_image<span class="token punctuation">.</span>to<span class="token punctuation">(</span>dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>int64<span class="token punctuation">)</span>             <span class="token comment"># Label background (below the low threshold)</span>            <span class="token comment"># 背景标签</span>            bg_inds <span class="token operator">=</span> matched_idxs <span class="token operator">==</span> Matcher<span class="token punctuation">.</span>BELOW_LOW_THRESHOLD            labels_per_image<span class="token punctuation">[</span>bg_inds<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>             <span class="token comment"># Label ignore proposals (between low and high thresholds)</span>            <span class="token comment"># 被忽视的样本</span>            ignore_inds <span class="token operator">=</span> matched_idxs <span class="token operator">==</span> Matcher<span class="token punctuation">.</span>BETWEEN_THRESHOLDS            labels_per_image<span class="token punctuation">[</span>ignore_inds<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token comment"># -1 is ignored by sampler</span>             <span class="token comment"># compute regression targets</span>            <span class="token comment"># 计算偏移量target  因为网络预测的结果是偏移量，所以需要生成偏移量标签</span>            regression_targets_per_image <span class="token operator">=</span> self<span class="token punctuation">.</span>box_coder<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>                matched_targets<span class="token punctuation">.</span>bbox<span class="token punctuation">,</span> proposals_per_image<span class="token punctuation">.</span>bbox            <span class="token punctuation">)</span>            <span class="token comment"># 对生成好的类别标签和偏移量标签进行保存</span>            labels<span class="token punctuation">.</span>append<span class="token punctuation">(</span>labels_per_image<span class="token punctuation">)</span>            regression_targets<span class="token punctuation">.</span>append<span class="token punctuation">(</span>regression_targets_per_image<span class="token punctuation">)</span>         <span class="token keyword">return</span> labels<span class="token punctuation">,</span> regression_targets<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、subsample-函数"><a href="#4、subsample-函数" class="headerlink" title="4、subsample()函数"></a>4、subsample()函数</h4><blockquote><p>上面的prepare_targets()函数就是返回为Proposals匹配好的类别标签和box偏移量标签，接下来将通过subsample（）进行正负样本的筛选，我们来看看相关代码：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">subsample</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> proposals<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    This method performs the positive/negative sampling, and return    the sampled proposals.    Note: this function keeps a state.    Arguments:        proposals (list[BoxList])        targets (list[BoxList])    """</span>    <span class="token comment"># 获取Proposals分配好的标签</span>    labels<span class="token punctuation">,</span> regression_targets <span class="token operator">=</span> self<span class="token punctuation">.</span>prepare_targets<span class="token punctuation">(</span>proposals<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>    <span class="token comment"># 获取被分配为正负样本的索引  由BalancedPositiveNegativeSampler类进行分配</span>    sampled_pos_inds<span class="token punctuation">,</span> sampled_neg_inds <span class="token operator">=</span> self<span class="token punctuation">.</span>fg_bg_sampler<span class="token punctuation">(</span>labels<span class="token punctuation">)</span>     proposals <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>proposals<span class="token punctuation">)</span>    <span class="token comment"># add corresponding label and regression_targets information to the bounding boxes</span>    <span class="token keyword">for</span> labels_per_image<span class="token punctuation">,</span> regression_targets_per_image<span class="token punctuation">,</span> proposals_per_image <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>        labels<span class="token punctuation">,</span> regression_targets<span class="token punctuation">,</span> proposals    <span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 给BoxList类型的Proposals添加标签信息</span>        proposals_per_image<span class="token punctuation">.</span>add_field<span class="token punctuation">(</span><span class="token string">"labels"</span><span class="token punctuation">,</span> labels_per_image<span class="token punctuation">)</span>        proposals_per_image<span class="token punctuation">.</span>add_field<span class="token punctuation">(</span>            <span class="token string">"regression_targets"</span><span class="token punctuation">,</span> regression_targets_per_image        <span class="token punctuation">)</span>     <span class="token comment"># distributed sampled proposals, that were obtained on all feature maps</span>    <span class="token comment"># concatenated via the fg_bg_sampler, into individual feature map levels</span>    <span class="token comment"># 对BoxList类型的Proposals进行正负样本筛选（对应的标签也会一并被筛选出来）</span>    <span class="token keyword">for</span> img_idx<span class="token punctuation">,</span> <span class="token punctuation">(</span>pos_inds_img<span class="token punctuation">,</span> neg_inds_img<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>        <span class="token builtin">zip</span><span class="token punctuation">(</span>sampled_pos_inds<span class="token punctuation">,</span> sampled_neg_inds<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">:</span>        img_sampled_inds <span class="token operator">=</span> torch<span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span>pos_inds_img <span class="token operator">|</span> neg_inds_img<span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        proposals_per_image <span class="token operator">=</span> proposals<span class="token punctuation">[</span>img_idx<span class="token punctuation">]</span><span class="token punctuation">[</span>img_sampled_inds<span class="token punctuation">]</span>        proposals<span class="token punctuation">[</span>img_idx<span class="token punctuation">]</span> <span class="token operator">=</span> proposals_per_image    <span class="token comment"># 得到筛选之后的Proposals（BoxList对象 其中包含有label信息）</span>    self<span class="token punctuation">.</span>_proposals <span class="token operator">=</span> proposals    <span class="token keyword">return</span> proposals<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、call-函数"><a href="#5、call-函数" class="headerlink" title="5、call()函数"></a>5、<strong>call</strong>()函数</h4><blockquote><p>通过subsample（）筛选得到可以用于训练阶段的Proposals之后（注意这些Proposals都是从RPN输出的Proposals中进行筛选的），就要进行最后loss计算工作了，我们来看一下__call__()函数：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> class_logits<span class="token punctuation">,</span> box_regression<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Computes the loss for Faster R-CNN.    This requires that the subsample method has been called beforehand.    Arguments:        class_logits (list[Tensor])        box_regression (list[Tensor])    Returns:        classification_loss (Tensor)        box_loss (Tensor)    """</span>    <span class="token comment"># 预测的Proposals类别</span>    class_logits <span class="token operator">=</span> cat<span class="token punctuation">(</span>class_logits<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment"># 预测的Proposals box偏移量</span>    box_regression <span class="token operator">=</span> cat<span class="token punctuation">(</span>box_regression<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    device <span class="token operator">=</span> class_logits<span class="token punctuation">.</span>device     <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"_proposals"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">"subsample needs to be called before"</span><span class="token punctuation">)</span>    <span class="token comment"># 获取用于box head训练阶段输入的Proposals和它对应的标签</span>    proposals <span class="token operator">=</span> self<span class="token punctuation">.</span>_proposals    <span class="token comment"># 获取proposals对应的真实类别标签</span>    labels <span class="token operator">=</span> cat<span class="token punctuation">(</span><span class="token punctuation">[</span>proposal<span class="token punctuation">.</span>get_field<span class="token punctuation">(</span><span class="token string">"labels"</span><span class="token punctuation">)</span> <span class="token keyword">for</span> proposal <span class="token keyword">in</span> proposals<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment"># 获取proposals对应的真实box 偏移量</span>    regression_targets <span class="token operator">=</span> cat<span class="token punctuation">(</span>        <span class="token punctuation">[</span>proposal<span class="token punctuation">.</span>get_field<span class="token punctuation">(</span><span class="token string">"regression_targets"</span><span class="token punctuation">)</span> <span class="token keyword">for</span> proposal <span class="token keyword">in</span> proposals<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span>    <span class="token punctuation">)</span>    <span class="token comment"># 计算类别分类loss</span>    classification_loss <span class="token operator">=</span> F<span class="token punctuation">.</span>cross_entropy<span class="token punctuation">(</span>class_logits<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>     <span class="token comment"># get indices that correspond to the regression targets for</span>    <span class="token comment"># the corresponding ground truth labels, to be used with</span>    <span class="token comment"># advanced indexing</span>    <span class="token comment"># 不对负样本的box进行回归loss计算  所以选出正样本的索引</span>    sampled_pos_inds_subset <span class="token operator">=</span> torch<span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span>labels <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    labels_pos <span class="token operator">=</span> labels<span class="token punctuation">[</span>sampled_pos_inds_subset<span class="token punctuation">]</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>cls_agnostic_bbox_reg<span class="token punctuation">:</span>        map_inds <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        map_inds <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> labels_pos<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">+</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>    <span class="token comment"># 计算box 偏移量的回归loss</span>    box_loss <span class="token operator">=</span> smooth_l1_loss<span class="token punctuation">(</span>        box_regression<span class="token punctuation">[</span>sampled_pos_inds_subset<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">,</span> map_inds<span class="token punctuation">]</span><span class="token punctuation">,</span>        regression_targets<span class="token punctuation">[</span>sampled_pos_inds_subset<span class="token punctuation">]</span><span class="token punctuation">,</span>        size_average<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>        beta<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    box_loss <span class="token operator">=</span> box_loss <span class="token operator">/</span> labels<span class="token punctuation">.</span>numel<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> classification_loss<span class="token punctuation">,</span> box_loss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>至此box_head的loss文件就算介绍完了，总结一下整个过程就是：</p><ol><li>给每个Proposals匹配对应的类别标签和box标签，进而计算出box偏移量的回归标签。</li><li>在对这些匹配好标签的Proposals筛选正负样本。（只有提前匹配好标签才知道哪些是正类哪些是负类嘛）</li><li>通过网络对Proposals的最后的分类结果和box偏移量的回归结果，结合匹配好的标签计算loss。</li></ol><p>同时box_head部分算是已经介绍完了，下一次将展开mask_head的介绍，待续~</p><p><strong>码字不易  未经许可  请勿随意转载!</strong></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> MaskRCNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maskrcnn-benchmark-master（九）：box_head的inference文件</title>
      <link href="/2021/08/03/maskrcnn-benchmark-master-jiu-box-head-de-inference-wen-jian/"/>
      <url>/2021/08/03/maskrcnn-benchmark-master-jiu-box-head-de-inference-wen-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>上一个博客已经介绍了box_head的整个网络结构部分，在对box_head进行inference过程就需要一个后处理类，接下来这篇博客将介绍inference文件中的make_roi_box_post_processor()函数和PostProcessor类。</p><p>PostProcessor类:因为输入ROI_heads模块的Proposals数目本身就很多，然后在网络分类过程中，一般会给每个Proposal生成对应类别个box，因此最后生成的box会非常的多，所以需要PostProcessor类来挑选并决定最后输出哪些box和类别。</p><p>举个栗子：总共是进行10分类，输入ROI_head模块的Proposals数目为100个，就意味着要给每个Proposals的box生成10种偏移量（每个类被一种），那个最后输出的box有100*10=1000个，但是模型不可能最后在一张图片框出1000个框作为输出，所以需要PostProcessor类来对这些box进行筛选。</p></blockquote><h3 id="一、-make-roi-box-post-processor-函数"><a href="#一、-make-roi-box-post-processor-函数" class="headerlink" title="一、 make_roi_box_post_processor()函数"></a>一、 make_roi_box_post_processor()函数</h3><blockquote><p>首先看到make_roi_box_post_processor()函数，它的作用就是获得一个PostProcessor类对象，并返回，我们来看看相关代码：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_roi_box_post_processor</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">:</span>    use_fpn <span class="token operator">=</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>ROI_HEADS<span class="token punctuation">.</span>USE_FPN     <span class="token comment"># 和box编解码相关的参数</span>    bbox_reg_weights <span class="token operator">=</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>ROI_HEADS<span class="token punctuation">.</span>BBOX_REG_WEIGHTS    box_coder <span class="token operator">=</span> BoxCoder<span class="token punctuation">(</span>weights<span class="token operator">=</span>bbox_reg_weights<span class="token punctuation">)</span>     <span class="token comment"># 设置得分阈值 作为哪些box是否输出的依据</span>    score_thresh <span class="token operator">=</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>ROI_HEADS<span class="token punctuation">.</span>SCORE_THRESH    <span class="token comment"># NMS的阈值（用于去除掉一部分box）</span>    nms_thresh <span class="token operator">=</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>ROI_HEADS<span class="token punctuation">.</span>NMS    <span class="token comment"># 每张图片的检测的最大instance数目</span>    detections_per_img <span class="token operator">=</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>ROI_HEADS<span class="token punctuation">.</span>DETECTIONS_PER_IMG    cls_agnostic_bbox_reg <span class="token operator">=</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>CLS_AGNOSTIC_BBOX_REG    bbox_aug_enabled <span class="token operator">=</span> cfg<span class="token punctuation">.</span>TEST<span class="token punctuation">.</span>BBOX_AUG<span class="token punctuation">.</span>ENABLED     <span class="token comment"># 生成PostProcessor类对象</span>    postprocessor <span class="token operator">=</span> PostProcessor<span class="token punctuation">(</span>        score_thresh<span class="token punctuation">,</span>        nms_thresh<span class="token punctuation">,</span>        detections_per_img<span class="token punctuation">,</span>        box_coder<span class="token punctuation">,</span>        cls_agnostic_bbox_reg<span class="token punctuation">,</span>        bbox_aug_enabled    <span class="token punctuation">)</span>    <span class="token comment"># 返回PostProcessor类对象</span>    <span class="token keyword">return</span> postprocessor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、PostProcessor类"><a href="#二、PostProcessor类" class="headerlink" title="二、PostProcessor类"></a>二、PostProcessor类</h3><blockquote><p>接下来介绍PostProcessor类，我们首先看一下类的__init__（）函数:</p></blockquote><h4 id="1、init-函数"><a href="#1、init-函数" class="headerlink" title="1、init()函数"></a>1、<strong>init</strong>()函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># inference过程用到的类</span><span class="token keyword">class</span> <span class="token class-name">PostProcessor</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    From a set of classification scores, box regression and proposals,    computes the post-processed boxes, and applies NMS to obtain the    final results    从一系列的类别分类得分，边框回归以及proposals中，计算post-processed boxes,    以及应用NMS得到最后的结果。    """</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>        self<span class="token punctuation">,</span>        score_thresh<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">,</span>        nms<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>        detections_per_img<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>        box_coder<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>        cls_agnostic_bbox_reg<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>        bbox_aug_enabled<span class="token operator">=</span><span class="token boolean">False</span>    <span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Arguments:            score_thresh (float)            nms (float)            detections_per_img (int)            box_coder (BoxCoder)        """</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>PostProcessor<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 类别得分阈值</span>        self<span class="token punctuation">.</span>score_thresh <span class="token operator">=</span> score_thresh        <span class="token comment"># nms阈值</span>        self<span class="token punctuation">.</span>nms <span class="token operator">=</span> nms        <span class="token comment"># 一张图片最后检测结果最大输出box数目</span>        self<span class="token punctuation">.</span>detections_per_img <span class="token operator">=</span> detections_per_img        <span class="token keyword">if</span> box_coder <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            box_coder <span class="token operator">=</span> BoxCoder<span class="token punctuation">(</span>weights<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10.</span><span class="token punctuation">,</span> <span class="token number">10.</span><span class="token punctuation">,</span> <span class="token number">5.</span><span class="token punctuation">,</span> <span class="token number">5.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># box编解码器</span>        self<span class="token punctuation">.</span>box_coder <span class="token operator">=</span> box_coder        self<span class="token punctuation">.</span>cls_agnostic_bbox_reg <span class="token operator">=</span> cls_agnostic_bbox_reg        self<span class="token punctuation">.</span>bbox_aug_enabled <span class="token operator">=</span> bbox_aug_enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、forward-函数"><a href="#2、forward-函数" class="headerlink" title="2、forward()函数"></a>2、forward()函数</h4><blockquote><p>接下来看看forward()函数:</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> boxes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Arguments:        x (tuple[tensor, tensor, tensor]): x contains the class logits           and the box_regression from the model.        boxes (list[BoxList]): bounding boxes that are used as            reference, one for each image    Returns:        results (list[BoxList]): one BoxList for each image, containing            the extra fields labels and scores    """</span>    <span class="token comment"># 得到box_head结构为每个proposals输出的类别分类结果和box偏移量</span>    class_logits<span class="token punctuation">,</span> box_regression <span class="token operator">=</span> x    <span class="token comment"># 进行一个softmax操作</span>    class_prob <span class="token operator">=</span> F<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>class_logits<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment"># TODO think about a representation of batch of boxes</span>    <span class="token comment"># 获取每张图片的size</span>    image_shapes <span class="token operator">=</span> <span class="token punctuation">[</span>box<span class="token punctuation">.</span>size <span class="token keyword">for</span> box <span class="token keyword">in</span> boxes<span class="token punctuation">]</span>    <span class="token comment"># 获取每一张图片的Proposals数目</span>    boxes_per_image <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span> <span class="token keyword">for</span> box <span class="token keyword">in</span> boxes<span class="token punctuation">]</span>    concat_boxes <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>bbox <span class="token keyword">for</span> a <span class="token keyword">in</span> boxes<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>     <span class="token comment"># 这个地方先不用管它</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>cls_agnostic_bbox_reg<span class="token punctuation">:</span>        box_regression <span class="token operator">=</span> box_regression<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment"># 给每个Proposal加上偏移量，得到网络微调之后的Proposals</span>    proposals <span class="token operator">=</span> self<span class="token punctuation">.</span>box_coder<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>        box_regression<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>boxes_per_image<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> concat_boxes    <span class="token punctuation">)</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>cls_agnostic_bbox_reg<span class="token punctuation">:</span>        proposals <span class="token operator">=</span> proposals<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> class_prob<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 获取分类类别数（包含了背景类别）</span>    num_classes <span class="token operator">=</span> class_prob<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment"># 按照每张图片的Proposals数进行切分</span>    <span class="token comment"># 得到的proposals变量维度就是（batch size, 每张图片的Proposals数）</span>    proposals <span class="token operator">=</span> proposals<span class="token punctuation">.</span>split<span class="token punctuation">(</span>boxes_per_image<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    class_prob <span class="token operator">=</span> class_prob<span class="token punctuation">.</span>split<span class="token punctuation">(</span>boxes_per_image<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>     results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 分别对每一张图片进行操作 因为图片都是按照batch size传入的</span>    <span class="token keyword">for</span> prob<span class="token punctuation">,</span> boxes_per_img<span class="token punctuation">,</span> image_shape <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>        class_prob<span class="token punctuation">,</span> proposals<span class="token punctuation">,</span> image_shapes    <span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 将每个加上偏移量（微调）之后的Proposals 按照BoxList的类型进行保存</span>        <span class="token comment"># 每个boxlist对象都包含有一张图片中进行ROI_head结构微调过后得到的Proposals</span>        boxlist <span class="token operator">=</span> self<span class="token punctuation">.</span>prepare_boxlist<span class="token punctuation">(</span>boxes_per_img<span class="token punctuation">,</span> prob<span class="token punctuation">,</span> image_shape<span class="token punctuation">)</span>        boxlist <span class="token operator">=</span> boxlist<span class="token punctuation">.</span>clip_to_image<span class="token punctuation">(</span>remove_empty<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>bbox_aug_enabled<span class="token punctuation">:</span>              <span class="token comment"># If bbox aug is enabled, we will do it later</span>            <span class="token comment"># 最后对这些微调之后的Proposals进行筛选</span>            boxlist <span class="token operator">=</span> self<span class="token punctuation">.</span>filter_results<span class="token punctuation">(</span>boxlist<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>        results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>boxlist<span class="token punctuation">)</span>    <span class="token keyword">return</span> results<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、prepare-boxlist-函数"><a href="#3、prepare-boxlist-函数" class="headerlink" title="3、prepare_boxlist()函数"></a>3、prepare_boxlist()函数</h4><blockquote><p>forward()函数中还涉及到了prepare_boxlist()函数和filter_results()函数，其实filter_results()函数才是真正进行筛选的函数，下面首先介绍prepare_boxlist()函数：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 这个函数就是对一张图片微调之后得到的proposal（box）信息 </span><span class="token comment"># 类别分类的scores信息 图片的size信息都是整合到一个BoxList对象中去</span><span class="token keyword">def</span> <span class="token function">prepare_boxlist</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> boxes<span class="token punctuation">,</span> scores<span class="token punctuation">,</span> image_shape<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Returns BoxList from `boxes` and adds probability scores information    as an extra field    `boxes` has shape (#detections, 4 * #classes), where each row represents    a list of predicted bounding boxes for each of the object classes in the    dataset (including the background class). The detections in each row    originate from the same object proposal.    `scores` has shape (#detection, #classes), where each row represents a list    of object detection confidence scores for each of the object classes in the    dataset (including the background class). `scores[i, j]`` corresponds to the    box at `boxes[i, j * 4:(j + 1) * 4]`.    """</span>    boxes <span class="token operator">=</span> boxes<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>    scores <span class="token operator">=</span> scores<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    boxlist <span class="token operator">=</span> BoxList<span class="token punctuation">(</span>boxes<span class="token punctuation">,</span> image_shape<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"xyxy"</span><span class="token punctuation">)</span>    boxlist<span class="token punctuation">.</span>add_field<span class="token punctuation">(</span><span class="token string">"scores"</span><span class="token punctuation">,</span> scores<span class="token punctuation">)</span>    <span class="token keyword">return</span> boxlist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、filter-results-函数"><a href="#4、filter-results-函数" class="headerlink" title="4、filter_results()函数"></a>4、filter_results()函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">filter_results</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> boxlist<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Returns bounding-box detection results by thresholding on scores and    applying non-maximum suppression (NMS).    """</span>    <span class="token comment"># unwrap the boxlist to avoid additional overhead.</span>    <span class="token comment"># if we had multi-class NMS, we could perform this directly on the boxlist</span>    <span class="token comment"># 将BoxList对象中的box(Proposals)取出来  shape is(Proposals数, 类别数*4)</span>    boxes <span class="token operator">=</span> boxlist<span class="token punctuation">.</span>bbox<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> num_classes <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment"># 将BoxList对象中的类别置信度得分取出来   shape is(Proposals数, 类别数)</span>    scores <span class="token operator">=</span> boxlist<span class="token punctuation">.</span>get_field<span class="token punctuation">(</span><span class="token string">"scores"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>     device <span class="token operator">=</span> scores<span class="token punctuation">.</span>device    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># Apply threshold on detection probabilities and apply NMS</span>    <span class="token comment"># Skip j = 0, because it's the background class</span>    <span class="token comment"># 判断哪些得分大于阈值</span>    inds_all <span class="token operator">=</span> scores <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>score_thresh    <span class="token comment"># 通过遍历类别进行筛选  index=0为背景所以跳过  从index=1开始</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取得分（类别置信度）大于阈值的索引</span>        inds <span class="token operator">=</span> inds_all<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># 获取当前类别得分大于阈值的索引</span>        scores_j <span class="token operator">=</span> scores<span class="token punctuation">[</span>inds<span class="token punctuation">,</span> j<span class="token punctuation">]</span>        <span class="token comment"># 获取上面获取的索引  所对应的box信息</span>        boxes_j <span class="token operator">=</span> boxes<span class="token punctuation">[</span>inds<span class="token punctuation">,</span> j <span class="token operator">*</span> <span class="token number">4</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span>        <span class="token comment"># 将该类别（第j类别）的类别得分低于阈值的box信息，图片信息都保存在                </span>        <span class="token comment"># boxlist_for_class对象中</span>        boxlist_for_class <span class="token operator">=</span> BoxList<span class="token punctuation">(</span>boxes_j<span class="token punctuation">,</span> boxlist<span class="token punctuation">.</span>size<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"xyxy"</span><span class="token punctuation">)</span>        <span class="token comment"># 给boxlist_for_class添加大于阈值的该类别得分信息</span>        boxlist_for_class<span class="token punctuation">.</span>add_field<span class="token punctuation">(</span><span class="token string">"scores"</span><span class="token punctuation">,</span> scores_j<span class="token punctuation">)</span>        <span class="token comment"># boxlist_for_class进行NMS操作  操作之后剩余的box都在boxlist_for_class中</span>        boxlist_for_class <span class="token operator">=</span> boxlist_nms<span class="token punctuation">(</span>            boxlist_for_class<span class="token punctuation">,</span> self<span class="token punctuation">.</span>nms        <span class="token punctuation">)</span>        <span class="token comment"># 给剩余下来的box添加第j个类别标签</span>        num_labels <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>boxlist_for_class<span class="token punctuation">)</span>        boxlist_for_class<span class="token punctuation">.</span>add_field<span class="token punctuation">(</span>            <span class="token string">"labels"</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">(</span>num_labels<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>int64<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token comment"># 进行保存</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>boxlist_for_class<span class="token punctuation">)</span>     result <span class="token operator">=</span> cat_boxlist<span class="token punctuation">(</span>result<span class="token punctuation">)</span>    number_of_detections <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>     <span class="token comment"># Limit to max_per_image detections **over all classes**</span>    <span class="token comment"># 如果检测得到的总的intances数目（Proposals）要大于参数设定的最大限制数目</span>    <span class="token comment"># 通过置信度排序去除掉一部分</span>    <span class="token keyword">if</span> number_of_detections <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>detections_per_img <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        cls_scores <span class="token operator">=</span> result<span class="token punctuation">.</span>get_field<span class="token punctuation">(</span><span class="token string">"scores"</span><span class="token punctuation">)</span>        image_thresh<span class="token punctuation">,</span> _ <span class="token operator">=</span> torch<span class="token punctuation">.</span>kthvalue<span class="token punctuation">(</span>            cls_scores<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> number_of_detections <span class="token operator">-</span> self<span class="token punctuation">.</span>detections_per_img <span class="token operator">+</span> <span class="token number">1</span>        <span class="token punctuation">)</span>        keep <span class="token operator">=</span> cls_scores <span class="token operator">&gt;=</span> image_thresh<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        keep <span class="token operator">=</span> torch<span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span>keep<span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> result<span class="token punctuation">[</span>keep<span class="token punctuation">]</span>    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其实关键的思路就是按照每个类取出满足得分阈值要求的Proposals，然后分别对每个类选出的Proposals进行NMS操作（<strong>注意：不是对所有类别选出的Proposals，一起做NMS操作。</strong>）。下面用图例进行简单的说明：</p></blockquote><p><img src="1.jpg" alt="图1 后处理示意图"></p><blockquote><p>至此，box_head的inference文件已经介绍完了该文件主要是用于inference过程，训练过程并未用到该文件。通过文件中的make_roi_box_post_processor()函数生成PostProcessor类对象，对box_head部分预测好的Proposals进行后处理操作，选出最后作为输出的instances。</p></blockquote><blockquote><p>下一篇将介绍用于box_head训练阶段的loss文件：</p><p><a href="https://kingpopen.github.io/2021/08/03/maskrcnn-benchmark-master-shi-box-head-de-loss-wen-jian/">maskrcnn-benchmark-master（十）：box_head的loss文件 </a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> MaskRCNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maskrcnn-benchmark-master（八）：build_roi_box_head()函数</title>
      <link href="/2021/08/02/maskrcnn-benchmark-master-ba-build-roi-box-head-han-shu/"/>
      <url>/2021/08/02/maskrcnn-benchmark-master-ba-build-roi-box-head-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>本篇将介绍build_roi_box_head()函数，这个函数是在<strong>your_project/maskrcnn_benchmark/modeling/roi_heads/box_head/box_head.py</strong>文件中</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">build_roi_box_head</span><span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> in_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Constructs a new box head.    By default, uses ROIBoxHead, but if it turns out not to be enough, just register a new class    and make it a parameter in the config    """</span>    <span class="token comment"># 主要返回一个ROIBoxHead类对象</span>    <span class="token keyword">return</span> ROIBoxHead<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> in_channels<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一、ROIBoxHead类"><a href="#一、ROIBoxHead类" class="headerlink" title="一、ROIBoxHead类"></a>一、ROIBoxHead类</h3><blockquote><p>从代码可知，build_roi_box_head()主要是返回一个ROIBoxHead类对象，看来我们主要需要了解的目标就是这个ROIBoxHead类了，这个类也是在your_project/maskrcnn_benchmark/modeling/roi_heads/box_head/box_head.py文件中，我们首先看一下__init__()函数:</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ROIBoxHead</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Generic Box Head class.    """</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cfg<span class="token punctuation">,</span> in_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>ROIBoxHead<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># ROI层中的特征提取器（先进行ROI Align，后续有没有特征提取操作看具体head的方法）</span>        <span class="token comment"># 因为RPN提取的Proposals大小都不太一样，为了使得这些Proposals的图片特征大小一样，</span>        <span class="token comment"># 需要进行ROI Align操作得到大小一样的特征。</span>        self<span class="token punctuation">.</span>feature_extractor <span class="token operator">=</span> make_roi_box_feature_extractor<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> in_channels<span class="token punctuation">)</span>         <span class="token comment"># ROI层中的边框预测类（用于类别的分类和box的回归~）</span>        self<span class="token punctuation">.</span>predictor <span class="token operator">=</span> make_roi_box_predictor<span class="token punctuation">(</span>            cfg<span class="token punctuation">,</span> self<span class="token punctuation">.</span>feature_extractor<span class="token punctuation">.</span>out_channels<span class="token punctuation">)</span>         <span class="token comment"># 下面这两个和RPN中的很相像</span>        <span class="token comment"># ROI层中的后处理类（inference过程 进行NMS操作和box解码等操作）</span>        self<span class="token punctuation">.</span>post_processor <span class="token operator">=</span> make_roi_box_post_processor<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span>        <span class="token comment"># 训练过程计算loss</span>        self<span class="token punctuation">.</span>loss_evaluator <span class="token operator">=</span> make_roi_box_loss_evaluator<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>接着我们看一下该类的forward()函数，了解该类的一个处理流程：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> features<span class="token punctuation">,</span> proposals<span class="token punctuation">,</span> targets<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Arguments:        features (list[Tensor]): feature-maps from possibly several levels        proposals (list[BoxList]): proposal boxes        targets (list[BoxList], optional): the ground-truth targets.    Returns:        x (Tensor): the result of the feature extractor        proposals (list[BoxList]): during training, the subsampled proposals            are returned. During testing, the predicted boxlists are returned        losses (dict[Tensor]): During training, returns the losses for the            head. During testing, returns an empty dict.        x是特征提取器提取的特征        proposals分为两种情况：              1、在训练阶段，这是采样好用于训练的Proposals              2、在测试阶段，这是预测好的boxlists        loss也分两种情况：                1、在训练阶段，这是box_head的模块的loss值。              2、在测试阶段，这是一个空的字典。    """</span>     <span class="token keyword">if</span> self<span class="token punctuation">.</span>training<span class="token punctuation">:</span>        <span class="token comment"># Faster R-CNN subsamples during training the proposals with a fixed</span>        <span class="token comment"># positive / negative ratio</span>        <span class="token comment"># 筛选用于训练阶段计算loss的Proposals</span>        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            proposals <span class="token operator">=</span> self<span class="token punctuation">.</span>loss_evaluator<span class="token punctuation">.</span>subsample<span class="token punctuation">(</span>proposals<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>     <span class="token comment"># extract features that will be fed to the final classifier. The</span>    <span class="token comment"># feature_extractor generally corresponds to the pooler + heads</span>    <span class="token comment"># feature_extractor是用来提取特征传输给最终的分类器</span>    <span class="token comment"># feature_extractor是由pooler 层 + heads 组成的</span>    x <span class="token operator">=</span> self<span class="token punctuation">.</span>feature_extractor<span class="token punctuation">(</span>features<span class="token punctuation">,</span> proposals<span class="token punctuation">)</span>    <span class="token comment"># final classifier that converts the features into predictions</span>    <span class="token comment"># 分类器进行最后的预测</span>    class_logits<span class="token punctuation">,</span> box_regression <span class="token operator">=</span> self<span class="token punctuation">.</span>predictor<span class="token punctuation">(</span>x<span class="token punctuation">)</span>     <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>training<span class="token punctuation">:</span>        <span class="token comment"># 如果不是训练阶段，则要对预测的结果进行后处理  最后输出检测结果</span>        result <span class="token operator">=</span> self<span class="token punctuation">.</span>post_processor<span class="token punctuation">(</span><span class="token punctuation">(</span>class_logits<span class="token punctuation">,</span> box_regression<span class="token punctuation">)</span><span class="token punctuation">,</span> proposals<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token punctuation">,</span> result<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment"># 计算box的回归loss和类别的分类loss</span>    loss_classifier<span class="token punctuation">,</span> loss_box_reg <span class="token operator">=</span> self<span class="token punctuation">.</span>loss_evaluator<span class="token punctuation">(</span>        <span class="token punctuation">[</span>class_logits<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>box_regression<span class="token punctuation">]</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        x<span class="token punctuation">,</span>        proposals<span class="token punctuation">,</span>        <span class="token builtin">dict</span><span class="token punctuation">(</span>loss_classifier<span class="token operator">=</span>loss_classifier<span class="token punctuation">,</span> loss_box_reg<span class="token operator">=</span>loss_box_reg<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由ROIBoxHead类可以看出来，主要涉及了四个函数:</p><ol><li><strong>make_roi_box_feature_extractor()</strong>:包含有ROI Align操作，用来提取size一致的特征。</li><li><strong>make_roi_box_predictor()</strong>:feature_extractor提取的特征进行类别分类和box的回归。</li><li><strong>make_roi_box_post_processor()</strong>:如果是inference过程，通过该函数对预测的结果进行筛选，输出最终的检测结果（RPN的RPNPostProcessor类是不是很相似~）</li><li><strong>make_roi_box_loss_evaluator()</strong>:如果是训练过程，通过该函数对预测的结果筛选出正负样本用于计算box_head模块的loss。</li></ol><p>接下来我将一一介绍（整体结构简图如下所示）：</p></blockquote><p><img src="1.jpg" alt="图1 ROI head结构图"></p><h3 id="二、make-roi-box-feature-extractor"><a href="#二、make-roi-box-feature-extractor" class="headerlink" title="二、make_roi_box_feature_extractor()"></a>二、make_roi_box_feature_extractor()</h3><blockquote><p>该函数在<strong>your_project/maskrcnn_benchmark/modeling/roi_heads/box_head/roi_box_feature_extractors.py</strong>文件中，我们来看看相关代码：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_roi_box_feature_extractor</span><span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> in_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 使用注册器获取该ROI_BOX_FEATURE_EXTRACTORS模块的对象</span>    <span class="token comment"># 对应的ROI_BOX_FEATURE_EXTRACTORS模块都定义在该函数上面</span>    func <span class="token operator">=</span> registry<span class="token punctuation">.</span>ROI_BOX_FEATURE_EXTRACTORS<span class="token punctuation">[</span>        cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>ROI_BOX_HEAD<span class="token punctuation">.</span>FEATURE_EXTRACTOR    <span class="token punctuation">]</span>    <span class="token keyword">return</span> func<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> in_channels<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用注册器来获取参数中定义的feature_extractor，我们在该文件中找到了三种feature_extractor,它们分别是：ResNet50Conv5ROIFeatureExtractor、FPN2MLPFeatureExtractor、FPNXconv1fcFeatureExtractor。如果你自己想要重新定义一个，你也可以按照这些类的结构，重新写一个feature extractor，并给该类注册对应的名称，在参数文件对应位置使用该名称。我接下来对稍微简单一些的FPN2MLPFeatureExtractor类的代码做一个介绍：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在注册器中进行注册</span><span class="token decorator annotation punctuation">@registry<span class="token punctuation">.</span>ROI_BOX_FEATURE_EXTRACTORS<span class="token punctuation">.</span>register</span><span class="token punctuation">(</span><span class="token string">"FPN2MLPFeatureExtractor"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">FPN2MLPFeatureExtractor</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Heads for FPN for classification    """</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cfg<span class="token punctuation">,</span> in_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>FPN2MLPFeatureExtractor<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># Proposals经过ROI Align之后得到size大小</span>        resolution <span class="token operator">=</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>ROI_BOX_HEAD<span class="token punctuation">.</span>POOLER_RESOLUTION        scales <span class="token operator">=</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>ROI_BOX_HEAD<span class="token punctuation">.</span>POOLER_SCALES        sampling_ratio <span class="token operator">=</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>ROI_BOX_HEAD<span class="token punctuation">.</span>POOLER_SAMPLING_RATIO        <span class="token comment"># 进行ROI Align操作</span>        pooler <span class="token operator">=</span> Pooler<span class="token punctuation">(</span>            output_size<span class="token operator">=</span><span class="token punctuation">(</span>resolution<span class="token punctuation">,</span> resolution<span class="token punctuation">)</span><span class="token punctuation">,</span>            scales<span class="token operator">=</span>scales<span class="token punctuation">,</span>            sampling_ratio<span class="token operator">=</span>sampling_ratio<span class="token punctuation">,</span>        <span class="token punctuation">)</span>        <span class="token comment"># ROI Align之后得到的维度</span>        input_size <span class="token operator">=</span> in_channels <span class="token operator">*</span> resolution <span class="token operator">**</span> <span class="token number">2</span>        <span class="token comment"># 全连接层的输出维度</span>        representation_size <span class="token operator">=</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>ROI_BOX_HEAD<span class="token punctuation">.</span>MLP_HEAD_DIM        use_gn <span class="token operator">=</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>ROI_BOX_HEAD<span class="token punctuation">.</span>USE_GN        <span class="token comment"># 定义ROI Align的类变量</span>        self<span class="token punctuation">.</span>pooler <span class="token operator">=</span> pooler        <span class="token comment"># 定义全连接层的类变量</span>        self<span class="token punctuation">.</span>fc6 <span class="token operator">=</span> make_fc<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> representation_size<span class="token punctuation">,</span> use_gn<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc7 <span class="token operator">=</span> make_fc<span class="token punctuation">(</span>representation_size<span class="token punctuation">,</span> representation_size<span class="token punctuation">,</span> use_gn<span class="token punctuation">)</span>        <span class="token comment"># 提取特征之后得到最终的输出维度</span>        self<span class="token punctuation">.</span>out_channels <span class="token operator">=</span> representation_size     <span class="token comment"># 进行提取特征操作</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> proposals<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># ROI Align操作</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pooler<span class="token punctuation">(</span>x<span class="token punctuation">,</span> proposals<span class="token punctuation">)</span>        <span class="token comment"># 进行展平 作为全连接层的输出</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># 进行全连接层操作</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc6<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc7<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 返回提取的特征</span>        <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总的来看feature_extractor的相关代码相对还是比较好懂的。</p></blockquote><h3 id="三、-make-roi-box-predictor"><a href="#三、-make-roi-box-predictor" class="headerlink" title="三、 make_roi_box_predictor()"></a>三、 make_roi_box_predictor()</h3><blockquote><p>接下来看用作类别分类判断和box回归的roi_box_predictor()函数，这个函数在<strong>your_project/maskrcnn_benchmark/modeling/roi_heads/box_head/roi_box_predictors.py</strong>文件中：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_roi_box_predictor</span><span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> in_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>    func <span class="token operator">=</span> registry<span class="token punctuation">.</span>ROI_BOX_PREDICTOR<span class="token punctuation">[</span>cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>ROI_BOX_HEAD<span class="token punctuation">.</span>PREDICTOR<span class="token punctuation">]</span>    <span class="token keyword">return</span> func<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> in_channels<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>可以看出这个函数和make_roi_box_feature_extractor（）函数基本类似，都是通过注册器获取相关所需的对象，因此我们将重点关注到该函数上方被注册的2个predictor类上：FastRCNNPredictor类和FPNPredictor类，下面就以FastRCNNPredictor类的代码为例，做简要的介绍：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对特征先进行池化，再使用边框分类器进行分类和边框回归器进行回归</span><span class="token comment"># 首先在注册器ROI_BOX_PREDICTOR上注册该类</span><span class="token decorator annotation punctuation">@registry<span class="token punctuation">.</span>ROI_BOX_PREDICTOR<span class="token punctuation">.</span>register</span><span class="token punctuation">(</span><span class="token string">"FastRCNNPredictor"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">FastRCNNPredictor</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> config<span class="token punctuation">,</span> in_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>FastRCNNPredictor<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> in_channels <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span>        <span class="token comment"># 输入维度</span>        num_inputs <span class="token operator">=</span> in_channels         <span class="token comment"># 分类的类别数= 类别数 + 1（背景）</span>        num_classes <span class="token operator">=</span> config<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>ROI_BOX_HEAD<span class="token punctuation">.</span>NUM_CLASSES        <span class="token comment"># 进行全局平均池化</span>        self<span class="token punctuation">.</span>avgpool <span class="token operator">=</span> nn<span class="token punctuation">.</span>AdaptiveAvgPool2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># 全连接层用于分类</span>        self<span class="token punctuation">.</span>cls_score <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_inputs<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>        num_bbox_reg_classes <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">if</span> config<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>CLS_AGNOSTIC_BBOX_REG <span class="token keyword">else</span> num_classes        <span class="token comment"># 全连接层用于box的坐标回归</span>        self<span class="token punctuation">.</span>bbox_pred <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_inputs<span class="token punctuation">,</span> num_bbox_reg_classes <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token comment"># 类别分类参数初始化</span>        nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cls_score<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>        nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cls_score<span class="token punctuation">.</span>bias<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment"># box回归参数初始化</span>        nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bbox_pred<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>        nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bbox_pred<span class="token punctuation">.</span>bias<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>     <span class="token comment"># 执行过程</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 平均池化</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>avgpool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment"># 展平</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># 使用全连接层进行分类</span>        cls_logit <span class="token operator">=</span> self<span class="token punctuation">.</span>cls_score<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment"># 使用全连接层进行box回归</span>        bbox_pred <span class="token operator">=</span> self<span class="token punctuation">.</span>bbox_pred<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment"># 返回结果</span>        <span class="token keyword">return</span> cls_logit<span class="token punctuation">,</span> bbox_pred<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总的来看roi_box_predictor相关代码也是比较好懂的，就是正常pytorch写的网络结构代码。</p></blockquote><blockquote><p>接下来将会介绍 make_roi_box_post_processor()函数，它是在box_head的inference.py文件中，以及make_roi_box_loss_evaluator()函数，它是在box_head的loss.py中，由于这两个部分的内容有些多，所以决定放到下个博客进行介绍：</p><p><a href="https://kingpopen.github.io/2021/08/03/maskrcnn-benchmark-master-jiu-box-head-de-inference-wen-jian/">maskrcnn-benchmark-master（九）：box_head的inference文件</a></p><p><a href="https://kingpopen.github.io/2021/08/03/maskrcnn-benchmark-master-shi-box-head-de-loss-wen-jian/">maskrcnn-benchmark-master（十）：box_head的loss文件</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> MaskRCNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maskrcnn-benchmark-master（七）：build_roi_heads()函数</title>
      <link href="/2021/08/02/maskrcnn-benchmark-master-qi-build-roi-heads-han-shu/"/>
      <url>/2021/08/02/maskrcnn-benchmark-master-qi-build-roi-heads-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>截至上一篇博客，我们已经介绍完RPN的整个流程，RPN的作用是提取Proposals传入ROI_heads部分，然而ROI有哪些heads呢？根据不同的任务，代码分为了box_head，keypoint_head，mask_head。box_head：进行bounding box的回归以及类别的分类任务。</p><p>keypoint_head：进行关键点的检测。（这部分代码我已经从项目中去除掉了）</p><p>mask_head：进行mask的分割任务。</p></blockquote><h3 id="一、CombinedROIHeads类"><a href="#一、CombinedROIHeads类" class="headerlink" title="一、CombinedROIHeads类"></a>一、CombinedROIHeads类</h3><blockquote><p>接下来我们将开启ROI_heads的介绍篇章，build_roi_heads()函数在your_project/maskrcnn_benchmark/modeling/roi_heads/roi_heads.py文件中，我们打开这个文件,首先引入眼帘的是CombinedROIHeads类，通过这个类的名字，我们易可知这个类的作用是将box_head，keypoint_head，mask_head这几个模块都整合在一起，我们来看一下相关代码（关于keypoint_head的代码我已经删掉了~）：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CombinedROIHeads</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>ModuleDict<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Combines a set of individual heads (for box prediction or masks) into a single    head.    合并许多个单独的head为一个统一的heads    """</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cfg<span class="token punctuation">,</span> heads<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>CombinedROIHeads<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>heads<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cfg <span class="token operator">=</span> cfg<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 如果box和mask的head的特征共享，则将box head的features 赋值给mask head</span>        <span class="token keyword">if</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>MASK_ON <span class="token keyword">and</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>ROI_MASK_HEAD<span class="token punctuation">.</span>SHARE_BOX_FEATURE_EXTRACTOR<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>mask<span class="token punctuation">.</span>feature_extractor <span class="token operator">=</span> self<span class="token punctuation">.</span>box<span class="token punctuation">.</span>feature_extractor     <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> features<span class="token punctuation">,</span> proposals<span class="token punctuation">,</span> targets<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        losses <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment"># TODO rename x to roi_box_features, </span>        <span class="token comment"># if it doesn't increase memory consumption</span>        <span class="token comment"># box head的loss</span>        <span class="token comment"># self.box就是一个box_head的对象（后续的博客再介绍） </span>        <span class="token comment"># 返回结果是box_head部分提取的特征，detections是检测的结果，loss_box是损失函数</span>        x<span class="token punctuation">,</span> detections<span class="token punctuation">,</span> loss_box <span class="token operator">=</span> self<span class="token punctuation">.</span>box<span class="token punctuation">(</span>features<span class="token punctuation">,</span> proposals<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>        losses<span class="token punctuation">.</span>update<span class="token punctuation">(</span>loss_box<span class="token punctuation">)</span>         <span class="token comment"># 如果存在mask 分支</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>MASK_ON<span class="token punctuation">:</span>            mask_features <span class="token operator">=</span> features            <span class="token comment"># optimization: during training, if we share the feature extractor between</span>            <span class="token comment"># the box and the mask heads, then we can reuse the features already computed</span>            <span class="token comment"># 优化：在训练阶段，如果我们共享了box head 和 mask head的特征提取器， </span>            <span class="token comment"># 我们可以重复使用box head所计算的feature用于mask head</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>                self<span class="token punctuation">.</span>training                <span class="token keyword">and</span> self<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>ROI_MASK_HEAD<span class="token punctuation">.</span>SHARE_BOX_FEATURE_EXTRACTOR            <span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># 如果mask_feature共享box的特征 </span>                <span class="token comment"># 就将box_head部分提取的特征赋予mask_features</span>                mask_features <span class="token operator">=</span> x            <span class="token comment"># During training, self.box() will return the unaltered proposals as "detections"</span>            <span class="token comment"># this makes the API consistent during training and testing</span>            <span class="token comment"># 训练阶段， self.box() 会返回未经变换的proposals作为检测结果</span>            <span class="token comment"># 将mask的的检测结果加入detections中，并计算mask的loss返回。</span>            x<span class="token punctuation">,</span> detections<span class="token punctuation">,</span> loss_mask <span class="token operator">=</span> self<span class="token punctuation">.</span>mask<span class="token punctuation">(</span>mask_features<span class="token punctuation">,</span> detections<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>            losses<span class="token punctuation">.</span>update<span class="token punctuation">(</span>loss_mask<span class="token punctuation">)</span>         <span class="token keyword">return</span> x<span class="token punctuation">,</span> detections<span class="token punctuation">,</span> losses  <span class="token comment"># 从上述代码可以看出box_head和mask_head和之前介绍的rpn_heads很相像，</span><span class="token comment"># 返回的结果都包含有检测的结果和loss</span><span class="token comment"># rpn_head返回:Proposals(相当于RPN检测的bounding box 和类别结果), rpn_loss</span><span class="token comment"># box_head返回:提取的特征x, 检测的bounding box和类别分类结果detections, box_loss</span><span class="token comment"># mask_head返回:提取的特征x, 检测的mask结果并加上之前的box_head的检测结果, mask_loss</span><span class="token comment"># 因此推断box_head对象和mask_head对象中应该也是包含有相应的loss计算文件和inference文件的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、build-roi-heads-函数"><a href="#二、build-roi-heads-函数" class="headerlink" title="二、build_roi_heads()函数"></a>二、build_roi_heads()函数</h3><blockquote><p>接着我们看build_roi_heads()函数的相关代码:</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建roi heads</span><span class="token keyword">def</span> <span class="token function">build_roi_heads</span><span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> in_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># individually create the heads, that will be combined together</span>    <span class="token comment"># afterwards</span>    roi_heads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RETINANET_ON<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token comment"># 根据配置文件依次添加各个head</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RPN_ONLY<span class="token punctuation">:</span>        <span class="token comment"># 添加boxes head</span>        <span class="token comment"># 通过build_roi_box_head()创建roi_box_head分支</span>        roi_heads<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">,</span> build_roi_box_head<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> in_channels<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>MASK_ON<span class="token punctuation">:</span>        <span class="token comment"># 添加mask head</span>        <span class="token comment"># 通过build_roi_mask_head()创建roi_mask_head分支</span>        roi_heads<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"mask"</span><span class="token punctuation">,</span> build_roi_mask_head<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> in_channels<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># combine individual heads in a single module</span>    <span class="token comment"># 将独立的分支进行合并</span>    <span class="token keyword">if</span> roi_heads<span class="token punctuation">:</span>        roi_heads <span class="token operator">=</span> CombinedROIHeads<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> roi_heads<span class="token punctuation">)</span>     <span class="token keyword">return</span> roi_heads<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从build_roi_heads代码可以看出，它主要是通过build_roi_box_head()函数和build_roi_mask_head()函数来生成box_head和mask_head分支，最后通过CombinedROIHeads类将这两个分支进行整合，整体的结构简图如下所示：</p></blockquote><p><img src="1.jpg" alt="图1 ROI heads结构图"></p><blockquote><p>build_roi_box_head（）函数将放在下一篇博客介绍:</p><p>maskrcnn-benchmark-master（八）：<a href="https://kingpopen.github.io/2021/08/02/maskrcnn-benchmark-master-ba-build-roi-box-head-han-shu/">build_roi_box_head()函数</a></p><p>build_roi_mask_head（）函数待续~</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> MaskRCNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maskrcnn-benchmark-master（六）：RPN的loss文件</title>
      <link href="/2021/08/01/maskrcnn-benchmark-master-liu-rpn-de-loss-wen-jian/"/>
      <url>/2021/08/01/maskrcnn-benchmark-master-liu-rpn-de-loss-wen-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>上次介绍完了RPN的inference文件，这次接着介绍RPN的loss文件，RPN可以当作一个独立的模块来看待，它作用就是进行物体的检测（是否为需要检测的物体  以及 在什么位置），所以RPN阶段是有一个单独的loss需要计算的。</p><p>注：这里强调两个概念</p><ol><li>anchor  是网络预先固定好位置和大小的bounding box。</li><li>proposal是通过网络通过学习给anchor加上一定偏移量得到的bounding box。</li></ol><p><strong>分配GT标签是在anchor的基础上进行判断分配的，而不是在Proposal的基础上进行判断分配的。</strong></p></blockquote><h3 id="一、make-rpn-loss-evaluator"><a href="#一、make-rpn-loss-evaluator" class="headerlink" title="一、make_rpn_loss_evaluator()"></a>一、make_rpn_loss_evaluator()</h3><blockquote><p>RPN的loss文件在your_project/maskrcnn_benchmark/modeling/rpn/loss.py文件中，我们首先看到make_rpn_loss_evaluator()函数：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># RPN模块是通过调用这个函数 用于 计算loss的</span><span class="token keyword">def</span> <span class="token function">make_rpn_loss_evaluator</span><span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> box_coder<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 匹配器 用于给Proposals分配真实的标签</span>    matcher <span class="token operator">=</span> Matcher<span class="token punctuation">(</span>        cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RPN<span class="token punctuation">.</span>FG_IOU_THRESHOLD<span class="token punctuation">,</span>        cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RPN<span class="token punctuation">.</span>BG_IOU_THRESHOLD<span class="token punctuation">,</span>        allow_low_quality_matches<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>     <span class="token comment"># 正负样本筛选器（只有前景和背景两个类别） 选择用于训练的样本</span>    fg_bg_sampler <span class="token operator">=</span> BalancedPositiveNegativeSampler<span class="token punctuation">(</span>        cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RPN<span class="token punctuation">.</span>BATCH_SIZE_PER_IMAGE<span class="token punctuation">,</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RPN<span class="token punctuation">.</span>POSITIVE_FRACTION    <span class="token punctuation">)</span>     <span class="token comment"># 损失的计算器  用于计算RPN阶段的loss值</span>    loss_evaluator <span class="token operator">=</span> RPNLossComputation<span class="token punctuation">(</span>        matcher<span class="token punctuation">,</span>        fg_bg_sampler<span class="token punctuation">,</span>        box_coder<span class="token punctuation">,</span>        generate_rpn_labels    <span class="token punctuation">)</span>    <span class="token keyword">return</span> loss_evaluator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从上面的代码可以看出，整个函数主要由三个类的对象来构成，这三个类分别是：</p><p>Matcher类：因为上一个博客介绍的RPNPostProcessor类它只生成了Proposals，但是这些Proposals预测得对不对我们并不知道，所以需要Matcher类来给anchors分配它对应的真实标签，从而知道这些anchors所对应的Proposals预测得对不对。</p><p>BalancedPositiveNegativeSampler类：由于anchors的数目比较多，可能会有许多被预测为负样本的情况（毕竟正样本在一张图中是少部分），为了使得正负样本在训练过程中保持平衡，因此需要该类来进行筛选。</p><p>RPNLossComputation：用于给筛选过后的anchors（加上box的偏移量就得到Proposals）计算其对应的loss。</p><p>下面针对这三个类来进行一一介绍：</p></blockquote><h3 id="二、Matcher类"><a href="#二、Matcher类" class="headerlink" title="二、Matcher类"></a>二、Matcher类</h3><blockquote><p>这类在<strong>your_project/maskrcnn_benchmark/modeling/matcher.py</strong>文件中，我们首先看到初始化函数__init__():</p></blockquote><h4 id="1、init-函数"><a href="#1、init-函数" class="headerlink" title="1、init()函数"></a>1、<strong>init</strong>()函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Matcher</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    This class assigns to each predicted "element" (e.g., a box) a ground-truth    element. Each predicted element will have exactly zero or one matches; each    ground-truth element may be assigned to zero or more predicted elements.    Matching is based on the MxN match_quality_matrix, that characterizes how well    each (ground-truth, predicted)-pair match. For example, if the elements are    boxes, the matrix may contain box IoU overlap values.    The matcher returns a tensor of size N containing the index of the ground-truth    element m that matches to prediction n. If there is no match, a negative value    is returned.    这个类是用来给每一个预测的元素（例如box，mask 等等）分配一个GT    每个预测的元素将有0个或者1个所匹配（0个就是相当于是背景）    每一个GT将会被对应到0个或者多个预测的元素    匹配的方式是通过M x N 维度的矩阵，它将predict element(N个元素) 和 GT(M个元素)对应起来    如果预测的元素为boxes ，这个矩阵将会包含box的IOU值    matcher的返回值为...    """</span>    <span class="token comment"># 低于阈值</span>    BELOW_LOW_THRESHOLD <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token comment"># 比较模糊的数值</span>    BETWEEN_THRESHOLDS <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> high_threshold<span class="token punctuation">,</span> low_threshold<span class="token punctuation">,</span> allow_low_quality_matches<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Args:            high_threshold (float): quality values greater than or equal to                this value are candidate matches.            low_threshold (float): a lower quality threshold used to stratify                matches into three levels:                1) matches &gt;= high_threshold                2) BETWEEN_THRESHOLDS matches in [low_threshold, high_threshold)                3) BELOW_LOW_THRESHOLD matches in [0, low_threshold)            allow_low_quality_matches (bool): if True, produce additional matches                for predictions that have only low-quality match candidates. See                set_low_quality_matches_ for more details.        参数：            high_threshold:大于等于这个值的被认为是候选的match            low_threshold:            分三种情况            1) matches &gt;= high_threshold            2) BETWEEN_THRESHOLDS:matches between [low_threshold, high_threshold)  被赋值为-2            3) BELOW_LOW_THRESHOLD：matches between [0, low_threshold)   被赋值为-1        """</span>        <span class="token comment"># 低阈值必须小于高阈值</span>        <span class="token keyword">assert</span> low_threshold <span class="token operator">&lt;=</span> high_threshold        <span class="token comment"># 给相关参数赋予初始化值</span>        self<span class="token punctuation">.</span>high_threshold <span class="token operator">=</span> high_threshold        self<span class="token punctuation">.</span>low_threshold <span class="token operator">=</span> low_threshold        self<span class="token punctuation">.</span>allow_low_quality_matches <span class="token operator">=</span> allow_low_quality_matches<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>init</strong>()函数中主要就是初始化相关的几个参数，下面我们来看看执行相关操作的call()函数:</p></blockquote><h4 id="2、call-函数"><a href="#2、call-函数" class="headerlink" title="2、call()函数"></a>2、<strong>call</strong>()函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> match_quality_matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token triple-quoted-string string">"""       Args:           match_quality_matrix (Tensor[float]): an MxN tensor, containing the           pairwise quality between M ground-truth elements and N predicted elements.           match_quality_matrix是一个MxN维的矩阵，它里面保存的值主要是M个GT元素和N个PT元素           之间的匹配可信度。（这个矩阵中的值就是GT和PT的IOU值）           其实就是计算anchors和GT的iou值，之前一直以为是计算Proposals和GT的iou值                  Returns:           matches (Tensor[int64]): an N tensor where N[i] is a matched gt in           [0, M - 1] or a negative value indicating that prediction i could not           be matched.       返回值：            N维的tensor            N[i]的值为gt的下标，范围为[0, M - 1],或者为一个负值，表示该predict没有匹配的GT            可以理解为给PT（predict element）都分配了一个对应的GT，如果有PT没有被分配，那么                该PT位置上的index值用-1表示       """</span>       <span class="token comment"># 保证每一张图片里面都至少有一个instance</span>       <span class="token keyword">if</span> match_quality_matrix<span class="token punctuation">.</span>numel<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>           <span class="token comment"># empty targets or proposals not supported during training</span>           <span class="token keyword">if</span> match_quality_matrix<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>               <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span>                   <span class="token string">"No ground-truth boxes available for one of the images "</span>                   <span class="token string">"during training"</span><span class="token punctuation">)</span>           <span class="token keyword">else</span><span class="token punctuation">:</span>               <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span>                   <span class="token string">"No proposal boxes available for one of the images "</span>                   <span class="token string">"during training"</span><span class="token punctuation">)</span>       <span class="token comment"># match_quality_matrix is M (gt) x N (predicted)</span>       <span class="token comment"># Max over gt elements (dim 0) to find best gt candidate for each prediction</span>       <span class="token comment"># 给每一个predict寻找其匹配值最大的值(一个列表，包含每一个proposal与GT的最大值IOU) </span>       <span class="token comment">#    以及 其下标（一个列表，每一个proposal所对应的GT下标）</span>       matched_vals<span class="token punctuation">,</span> matches <span class="token operator">=</span> match_quality_matrix<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>       <span class="token comment"># 如果允许低于阈值的也是作为候选者，则所有的matches都是</span>       <span class="token keyword">if</span> self<span class="token punctuation">.</span>allow_low_quality_matches<span class="token punctuation">:</span>           all_matches <span class="token operator">=</span> matches<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment"># Assign candidate matches with low quality to negative (unassigned) values</span>       <span class="token comment"># 找到哪些index是低于阈值的  哪些index是在阈值之间的</span>       below_low_threshold <span class="token operator">=</span> matched_vals <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>low_threshold       between_thresholds <span class="token operator">=</span> <span class="token punctuation">(</span>matched_vals <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>low_threshold<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>           matched_vals <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>high_threshold       <span class="token punctuation">)</span>       <span class="token comment"># 给低于阈值的IOU分配 低于阈值对应的值</span>       matches<span class="token punctuation">[</span>below_low_threshold<span class="token punctuation">]</span> <span class="token operator">=</span> Matcher<span class="token punctuation">.</span>BELOW_LOW_THRESHOLD       <span class="token comment"># 给处于阈值之间IOU的分配 处于阈值之间的值</span>       matches<span class="token punctuation">[</span>between_thresholds<span class="token punctuation">]</span> <span class="token operator">=</span> Matcher<span class="token punctuation">.</span>BETWEEN_THRESHOLDS       <span class="token keyword">if</span> self<span class="token punctuation">.</span>allow_low_quality_matches<span class="token punctuation">:</span>           self<span class="token punctuation">.</span>set_low_quality_matches_<span class="token punctuation">(</span>matches<span class="token punctuation">,</span> all_matches<span class="token punctuation">,</span> match_quality_matrix<span class="token punctuation">)</span>       <span class="token keyword">return</span> matches<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>整体的流程如下图所示，从流程图可以看出，Matcher类的作用就是给每一个PT（anchors）找到一个对应的GT（ground true元素）,并返回它们对应关系的一个列表。</p></blockquote><p><img src="1.jpg" alt="图1 matcher过程示意图"></p><h3 id="三、BalancedPositiveNegativeSampler类"><a href="#三、BalancedPositiveNegativeSampler类" class="headerlink" title="三、BalancedPositiveNegativeSampler类"></a>三、BalancedPositiveNegativeSampler类</h3><blockquote><p>我们已经通过Matcher类给每一个anchors分配了相应的GT，接着我们需要通过BalancedPositiveNegativeSampler类来调节正负样本用于训练，这个类被放在your_project/maskrcnn_benchmark/modeling/balanced_positive_negative_sampler.py文件中:</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 正负样本的选择器（因为要权衡好正负样本的比例）</span><span class="token keyword">class</span> <span class="token class-name">BalancedPositiveNegativeSampler</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    This class samples batches, ensuring that they contain a fixed proportion of positives    """</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> batch_size_per_image<span class="token punctuation">,</span> positive_fraction<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Arguments:            batch_size_per_image (int): number of elements to be selected per image            positive_fraction (float): percentage of positive elements per batch        batch_size_per_image（在配置文件中设置该参数）         是指每张图片挑选用于训练的anchors数目（如果实际数目小于这个值，那以实际数目为准）        postive_fraction 是指batch_size_per_image中正样本个数的比例        """</span>         self<span class="token punctuation">.</span>batch_size_per_image <span class="token operator">=</span> batch_size_per_image        self<span class="token punctuation">.</span>positive_fraction <span class="token operator">=</span> positive_fraction     <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matched_idxs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Arguments:            matched idxs: list of tensors containing -1, 0 or positive values.                Each tensor corresponds to a specific image.                -1 values are ignored, 0 are considered as negatives and &gt; 0 as                positives.        matched_idxs中包含每一个anchors的label值.  eg:[[1,4,5,0,-1,3,1...],[...],...]        (0为背景， -1为被忽视的类， positive值为相应的类别号)        Returns:            pos_idx (list[tensor])            neg_idx (list[tensor])        Returns two lists of binary masks for each image.        The first list contains the positive elements that were selected,        and the second list the negative example.0        """</span>        pos_idx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        neg_idx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 批量处理  考虑到batch size维度的缘故</span>        <span class="token keyword">for</span> matched_idxs_per_image <span class="token keyword">in</span> matched_idxs<span class="token punctuation">:</span>            <span class="token comment"># 得到正样本的anchors index</span>            positive <span class="token operator">=</span> torch<span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span>matched_idxs_per_image <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment"># 得到负样本的anchors index</span>            negative <span class="token operator">=</span> torch<span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span>matched_idxs_per_image <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>             <span class="token comment"># 正样本的数目</span>            num_pos <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>batch_size_per_image <span class="token operator">*</span> self<span class="token punctuation">.</span>positive_fraction<span class="token punctuation">)</span>            <span class="token comment"># protect against not enough positive examples</span>            num_pos <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>positive<span class="token punctuation">.</span>numel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num_pos<span class="token punctuation">)</span>            num_neg <span class="token operator">=</span> self<span class="token punctuation">.</span>batch_size_per_image <span class="token operator">-</span> num_pos            <span class="token comment"># protect against not enough negative examples</span>            num_neg <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>negative<span class="token punctuation">.</span>numel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num_neg<span class="token punctuation">)</span>             <span class="token comment"># randomly select positive and negative examples</span>            <span class="token comment"># 从所有的正样本中随机挑选一定数目的正样本 得到的是 postive列表 的index</span>            perm1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>randperm<span class="token punctuation">(</span>positive<span class="token punctuation">.</span>numel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> device<span class="token operator">=</span>positive<span class="token punctuation">.</span>device<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>num_pos<span class="token punctuation">]</span>            <span class="token comment"># 从所有的负样本中随机挑选一定数目的负样本</span>            perm2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>randperm<span class="token punctuation">(</span>negative<span class="token punctuation">.</span>numel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> device<span class="token operator">=</span>negative<span class="token punctuation">.</span>device<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>num_neg<span class="token punctuation">]</span>             <span class="token comment"># 得到用于训练正样本的 anchors index</span>            pos_idx_per_image <span class="token operator">=</span> positive<span class="token punctuation">[</span>perm1<span class="token punctuation">]</span>            <span class="token comment"># 得到用于训练负样本的 anchors index</span>            neg_idx_per_image <span class="token operator">=</span> negative<span class="token punctuation">[</span>perm2<span class="token punctuation">]</span>             <span class="token comment"># create binary mask from indices</span>            pos_idx_per_image_mask <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>                matched_idxs_per_image<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">bool</span>            <span class="token punctuation">)</span>            neg_idx_per_image_mask <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>                matched_idxs_per_image<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">bool</span>            <span class="token punctuation">)</span>            <span class="token comment"># 将是用来训练的正样本anchors 设置为1</span>            pos_idx_per_image_mask<span class="token punctuation">[</span>pos_idx_per_image<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token comment"># 将是用来训练的负样本anchors 设置为1</span>            neg_idx_per_image_mask<span class="token punctuation">[</span>neg_idx_per_image<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>             pos_idx<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pos_idx_per_image_mask<span class="token punctuation">)</span>            neg_idx<span class="token punctuation">.</span>append<span class="token punctuation">(</span>neg_idx_per_image_mask<span class="token punctuation">)</span>         <span class="token comment"># pos_idx列表中的每一个列表维度可能不太一样</span>        <span class="token comment"># （内部每一个列表的维度取决于预测过程中的anchors个数，列表的数目是batch size数目）</span>        <span class="token keyword">return</span> pos_idx<span class="token punctuation">,</span> neg_idx          <span class="token comment"># BalancedPositiveNegativeSampler类对象的__call__()函数返回值是：作为正样本的 </span>        <span class="token comment"># anchors和作为负样本的anchors</span>        <span class="token comment"># 例如pos_idx = [[0,1,1,0,1...],...]</span>        <span class="token comment"># 表示第一张图片中当作正样本的anchors下标为：1,2,4,...</span>        <span class="token comment"># 例如neg_idx = [[1,0,0,0,0,1,...], ....]</span>        <span class="token comment"># 表示第一张图片中当作负样本的anchors下标为：0,5,...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、RPNLossComputation"><a href="#四、RPNLossComputation" class="headerlink" title="四、RPNLossComputation"></a>四、RPNLossComputation</h3><blockquote><p>BalancedPositiveNegativeSampler类相对比较好懂一些，相关注释已经都写在代码中了，接下来我们介绍RPNLossComputation类，它调用了Matcher和BalancedPositiveNegativeSampler这两个类对象，RPNLossComputation类在your_project/maskrcnn_benchmark/modeling/rpn/loss.py文件中。</p><p>整个RPNLossComputation类中的调用关系图如下所示：</p></blockquote><p><img src="2.jpg" alt="图2 调用关系图"></p><h4 id="1、init-函数-1"><a href="#1、init-函数-1" class="headerlink" title="1、init()函数"></a>1、<strong>init</strong>()函数</h4><blockquote><p>我们首先看__init__()初始化函数，主要是在定义相关的类变量：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> proposal_matcher<span class="token punctuation">,</span> fg_bg_sampler<span class="token punctuation">,</span> box_coder<span class="token punctuation">,</span>             generate_labels_func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Arguments:        proposal_matcher (Matcher)        fg_bg_sampler (BalancedPositiveNegativeSampler)        box_coder (BoxCoder)    """</span>    <span class="token comment"># self.target_preparator = target_preparator</span>    <span class="token comment"># anchor 匹配器，用于匹配anchor和target</span>    <span class="token comment">#（因为每一个像素点都包含有9个anchor，所以每一个anchor应该和哪一个target来计算损伤，</span>    <span class="token comment"># 这个需要通过proposal_match来进行匹配）</span>    self<span class="token punctuation">.</span>proposal_matcher <span class="token operator">=</span> proposal_matcher    <span class="token comment"># 前景和背景的采集器，因为每一个像素点都对应有9个anchor，</span>    <span class="token comment"># 那每一个anchor是当作正样本还是负样本需要进行选择判断</span>    self<span class="token punctuation">.</span>fg_bg_sampler <span class="token operator">=</span> fg_bg_sampler    <span class="token comment"># 边框编码器，用于将anchor进行编码或者解码，用于计算损失</span>    self<span class="token punctuation">.</span>box_coder <span class="token operator">=</span> box_coder    <span class="token comment"># 初始化需要复制的属性</span>    self<span class="token punctuation">.</span>copied_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    self<span class="token punctuation">.</span>generate_labels_func <span class="token operator">=</span> generate_labels_func    <span class="token comment"># 指定需要放弃的anchor类型</span>    self<span class="token punctuation">.</span>discard_cases <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'not_visibility'</span><span class="token punctuation">,</span> <span class="token string">'between_thresholds'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、match-targets-to-anchors-函数"><a href="#2、match-targets-to-anchors-函数" class="headerlink" title="2、match_targets_to_anchors()函数"></a>2、match_targets_to_anchors()函数</h4><blockquote><p>根据上图，我们首先介绍match_targets_to_anchors()函数和generate_rpn_labels()函数：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 给anchors分配相应的标签</span>    <span class="token keyword">def</span> <span class="token function">match_targets_to_anchors</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> target<span class="token punctuation">,</span> copied_fields<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 计算anchors和GT之间的IOU</span>        <span class="token comment">#（维度为MxN  M表示GT的instance数  N表示得到的anchors数）</span>        match_quality_matrix <span class="token operator">=</span> boxlist_iou<span class="token punctuation">(</span>target<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>        <span class="token comment"># matched_idxs是一个列表 维度为(N,) 里面的值为GT的instance索引</span>        <span class="token comment"># 没有匹配上的值为-1 或-2  低于阈值的值赋予-1  处在阈值之间的值赋予-2</span>        matched_idxs <span class="token operator">=</span> self<span class="token punctuation">.</span>proposal_matcher<span class="token punctuation">(</span>match_quality_matrix<span class="token punctuation">)</span>        <span class="token comment"># RPN doesn't need any fields from target</span>        <span class="token comment"># for creating the labels, so clear them all</span>        <span class="token comment"># 拷贝一个Boxlist对象  里面的bbox变量拷贝来自target对象</span>        target <span class="token operator">=</span> target<span class="token punctuation">.</span>copy_with_fields<span class="token punctuation">(</span>copied_fields<span class="token punctuation">)</span>        <span class="token comment"># get the targets corresponding GT for each anchor</span>        <span class="token comment"># NB: need to clamp the indices because we can have a single</span>        <span class="token comment"># GT in the image, and matched_idxs can be -2, which goes</span>        <span class="token comment"># out of bounds</span>        <span class="token comment"># 没有匹配上GT的anchors 都给它们赋予index为0的GT,</span>        <span class="token comment"># matched_targets相当于就是一个充当anchors标签的BoxList对象（有box 有label）</span>        matched_targets <span class="token operator">=</span> target<span class="token punctuation">[</span>matched_idxs<span class="token punctuation">.</span>clamp<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        matched_targets<span class="token punctuation">.</span>add_field<span class="token punctuation">(</span><span class="token string">"matched_idxs"</span><span class="token punctuation">,</span> matched_idxs<span class="token punctuation">)</span>        <span class="token keyword">return</span> matched_targets  <span class="token comment"># This function should be overwritten in RetinaNet</span><span class="token keyword">def</span> <span class="token function">generate_rpn_labels</span><span class="token punctuation">(</span>matched_targets<span class="token punctuation">)</span><span class="token punctuation">:</span>    matched_idxs <span class="token operator">=</span> matched_targets<span class="token punctuation">.</span>get_field<span class="token punctuation">(</span><span class="token string">"matched_idxs"</span><span class="token punctuation">)</span>    <span class="token comment"># 获得一个bool值得mask  有分配标签的anchor为True 没有对应标签的anchor为False</span>    labels_per_image <span class="token operator">=</span> matched_idxs <span class="token operator">&gt;=</span> <span class="token number">0</span>    <span class="token keyword">return</span> labels_per_image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、prepare-targets-函数"><a href="#3、prepare-targets-函数" class="headerlink" title="3、prepare_targets()函数"></a>3、prepare_targets()函数</h4><blockquote><p>了解了相关流程之后，结合相关代码注释，阅读会相对简单些，下面是prepare_targets()函数：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">prepare_targets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> anchors<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">:</span>    labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    regression_targets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> anchors_per_image<span class="token punctuation">,</span> targets_per_image <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>anchors<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">:</span>        matched_targets <span class="token operator">=</span> self<span class="token punctuation">.</span>match_targets_to_anchors<span class="token punctuation">(</span>            anchors_per_image<span class="token punctuation">,</span> targets_per_image<span class="token punctuation">,</span> self<span class="token punctuation">.</span>copied_fields        <span class="token punctuation">)</span>        <span class="token comment"># 得到的matched_idxs中是每一个anchors所匹配好的GT索引</span>        matched_idxs <span class="token operator">=</span> matched_targets<span class="token punctuation">.</span>get_field<span class="token punctuation">(</span><span class="token string">"matched_idxs"</span><span class="token punctuation">)</span>        <span class="token comment"># 得到一个匹配好的anchors的mask，</span>        <span class="token comment"># [False, True, True, True, ...]  表示第2，3，4个anchors都已经匹配好GT</span>        labels_per_image <span class="token operator">=</span> self<span class="token punctuation">.</span>generate_labels_func<span class="token punctuation">(</span>matched_targets<span class="token punctuation">)</span>        <span class="token comment"># 将False 和 True用0 和 1表示</span>        labels_per_image <span class="token operator">=</span> labels_per_image<span class="token punctuation">.</span>to<span class="token punctuation">(</span>dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>         <span class="token comment"># Background (negative examples)</span>        <span class="token comment"># 获取负样本(其实感觉这一步是多余的  因为labels_pre_image经过generate_labels_func已经实现了这个效果)</span>        bg_indices <span class="token operator">=</span> matched_idxs <span class="token operator">==</span> Matcher<span class="token punctuation">.</span>BELOW_LOW_THRESHOLD        labels_per_image<span class="token punctuation">[</span>bg_indices<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>         <span class="token comment"># discard anchors that go out of the boundaries of the image</span>        <span class="token keyword">if</span> <span class="token string">"not_visibility"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>discard_cases<span class="token punctuation">:</span>            labels_per_image<span class="token punctuation">[</span><span class="token operator">~</span>anchors_per_image<span class="token punctuation">.</span>get_field<span class="token punctuation">(</span><span class="token string">"visibility"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>         <span class="token comment"># discard indices that are between thresholds</span>        <span class="token keyword">if</span> <span class="token string">"between_thresholds"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>discard_cases<span class="token punctuation">:</span>            inds_to_discard <span class="token operator">=</span> matched_idxs <span class="token operator">==</span> Matcher<span class="token punctuation">.</span>BETWEEN_THRESHOLDS            labels_per_image<span class="token punctuation">[</span>inds_to_discard<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>         <span class="token comment"># compute regression targets\</span>        <span class="token comment"># 计算box的标签</span>        regression_targets_per_image <span class="token operator">=</span> self<span class="token punctuation">.</span>box_coder<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>            matched_targets<span class="token punctuation">.</span>bbox<span class="token punctuation">,</span> anchors_per_image<span class="token punctuation">.</span>bbox        <span class="token punctuation">)</span>        <span class="token comment"># 将类别标签和box标签用列表保存</span>        labels<span class="token punctuation">.</span>append<span class="token punctuation">(</span>labels_per_image<span class="token punctuation">)</span>        regression_targets<span class="token punctuation">.</span>append<span class="token punctuation">(</span>regression_targets_per_image<span class="token punctuation">)</span>     <span class="token keyword">return</span> labels<span class="token punctuation">,</span> regression_targets<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、call-函数"><a href="#4、call-函数" class="headerlink" title="4、call()函数"></a>4、call()函数</h4><blockquote><p>最后是call()函数 :</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> anchors<span class="token punctuation">,</span> objectness<span class="token punctuation">,</span> box_regression<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Arguments:        anchors (list[list[BoxList]])        objectness (list[Tensor])        box_regression (list[Tensor])        targets (list[BoxList])    Returns:        objectness_loss (Tensor)        box_loss (Tensor)    """</span>    <span class="token comment"># 获取anchors (BoxList的对象列表)</span>    anchors <span class="token operator">=</span> <span class="token punctuation">[</span>cat_boxlist<span class="token punctuation">(</span>anchors_per_image<span class="token punctuation">)</span> <span class="token keyword">for</span> anchors_per_image <span class="token keyword">in</span> anchors<span class="token punctuation">]</span>    <span class="token comment"># 给anchors分配标签（GT） 返回的是分配好的类别标签和box标签</span>    labels<span class="token punctuation">,</span> regression_targets <span class="token operator">=</span> self<span class="token punctuation">.</span>prepare_targets<span class="token punctuation">(</span>anchors<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>    <span class="token comment"># 按一定比例选取正负样本用于训练阶段计算loss</span>    sampled_pos_inds<span class="token punctuation">,</span> sampled_neg_inds <span class="token operator">=</span> self<span class="token punctuation">.</span>fg_bg_sampler<span class="token punctuation">(</span>labels<span class="token punctuation">)</span>    sampled_pos_inds <span class="token operator">=</span> torch<span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>sampled_pos_inds<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    sampled_neg_inds <span class="token operator">=</span> torch<span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>sampled_neg_inds<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     sampled_inds <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>sampled_pos_inds<span class="token punctuation">,</span> sampled_neg_inds<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>     objectness<span class="token punctuation">,</span> box_regression <span class="token operator">=</span> \            concat_box_prediction_layers<span class="token punctuation">(</span>objectness<span class="token punctuation">,</span> box_regression<span class="token punctuation">)</span>     objectness <span class="token operator">=</span> objectness<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span>      labels <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>labels<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    regression_targets <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>regression_targets<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>     <span class="token comment"># 计算anchors的偏移量回归loss</span>    box_loss <span class="token operator">=</span> smooth_l1_loss<span class="token punctuation">(</span>        box_regression<span class="token punctuation">[</span>sampled_pos_inds<span class="token punctuation">]</span><span class="token punctuation">,</span>        regression_targets<span class="token punctuation">[</span>sampled_pos_inds<span class="token punctuation">]</span><span class="token punctuation">,</span>        beta<span class="token operator">=</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">9</span><span class="token punctuation">,</span>        size_average<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>sampled_inds<span class="token punctuation">.</span>numel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 计算类别的交叉熵loss</span>    objectness_loss <span class="token operator">=</span> F<span class="token punctuation">.</span>binary_cross_entropy_with_logits<span class="token punctuation">(</span>        objectness<span class="token punctuation">[</span>sampled_inds<span class="token punctuation">]</span><span class="token punctuation">,</span> labels<span class="token punctuation">[</span>sampled_inds<span class="token punctuation">]</span>    <span class="token punctuation">)</span>    <span class="token comment"># 返回两个loss</span>    <span class="token keyword">return</span> objectness_loss<span class="token punctuation">,</span> box_loss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>至此，RPN部分算是介绍完了，总结一下就是由三个部分组成：</p><ol><li>RPN结构：用来输出对应的anchor类别和坐标偏移量。</li><li>inference文件：筛选用于下一个ROI_head阶段的Proposals。</li><li>loss文件：选择用于RPN阶段计算loss的anchors，并给这些anchors分配标签，计算loss。</li></ol><p>（loss文件中选用的anchors和inference文件中生成Proposals的anchors并不相同，各自有各自的筛选机制。）</p><p>下一篇将介绍ROI_Head部分：</p><p>maskrcnn-benchmark-master（七）：<a href="https://kingpopen.github.io/2021/08/02/maskrcnn-benchmark-master-qi-build-roi-heads-han-shu/">build-roi-heads-函数</a></p><p><strong>码字不易 未经许可 请勿随意转载！</strong></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> MaskRCNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maskrcnn-benchmark-master（五）：RPN的inference文件</title>
      <link href="/2021/07/27/maskrcnn-benchmark-master-wu-rpn-de-inference-wen-jian/"/>
      <url>/2021/07/27/maskrcnn-benchmark-master-wu-rpn-de-inference-wen-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>上次我们介绍到了RPN网络的目的是获取Proposals，但是仅仅通过RPN_Head部分得到只是anchors的二分类结果和anchors的box回归结果，想要得到真正的Proposals，我们还需要通过make_rpn_postprocessor（）函数来对RPN_Head的输出作进一步的操作，而这个进一步操作都是通过your_project/maskrcnn_benchmark/modeling/rpn/inference.py中的RPNPostProcessor类来完成的（make_rpn_postprocessor（）函数也在该文件中。），简单的示意图，如下所示：</p></blockquote><p><img src="1.jpg" alt="图1 RPN结构图"></p><h3 id="一、RPNPOSTProcess类"><a href="#一、RPNPOSTProcess类" class="headerlink" title="一、RPNPOSTProcess类"></a>一、RPNPOSTProcess类</h3><blockquote><p>首先介绍一下RPNPostProcessor这个类到底做了些什么工作：</p><ol><li>在所有anchors中筛选出top_k个anchors，top_k由参数pre_nms_top_n决定。</li><li>将筛选之后得到的anchors和它对应的box回归值进行结合，得到对应的Proposals。(box回归值就是RPN预测的anchors的偏移量)</li><li>将面积小于min_size的Proposals去除掉，min_size由参数min_size决定。</li><li>通过NMS操作，对Proposals进行筛选，得到top_n个Proposals，top_n由参数post_nms_top_n决定</li><li>最后将top_n个Proposals和target标签一并作为结果返回（此时标签和Proposals的还未一一对应上）</li></ol><p>流程图如下所示：</p></blockquote><p><img src="2.jpg" alt="图2 流程图"></p><h4 id="1、init-函数"><a href="#1、init-函数" class="headerlink" title="1、init()函数"></a>1、<strong>init</strong>()函数</h4><blockquote><p>了解了相关流程之后，我们来看看相关的代码，首先看到__init__()函数：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># RPN后续处理类</span><span class="token keyword">class</span> <span class="token class-name">RPNPostProcessor</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Performs post-processing on the outputs of the RPN boxes, before feeding the    proposals to the heads    """</span>    <span class="token comment"># 初始化函数中主要是定义类变量，下面对几个类变量的意义做一定解释</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>        self<span class="token punctuation">,</span>        pre_nms_top_n<span class="token punctuation">,</span>        post_nms_top_n<span class="token punctuation">,</span>        nms_thresh<span class="token punctuation">,</span>        min_size<span class="token punctuation">,</span>        box_coder<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>        fpn_post_nms_top_n<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>        fpn_post_nms_per_batch<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Arguments:            pre_nms_top_n (int)            post_nms_top_n (int)            nms_thresh (float)            min_size (int)            box_coder (BoxCoder)            fpn_post_nms_top_n (int)        """</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>RPNPostProcessor<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 通过二分类置信度挑选的top_k个 anchors数目</span>        self<span class="token punctuation">.</span>pre_nms_top_n <span class="token operator">=</span> pre_nms_top_n        <span class="token comment"># 通过NMS挑选top_n个Proposals的数目</span>        self<span class="token punctuation">.</span>post_nms_top_n <span class="token operator">=</span> post_nms_top_n        <span class="token comment"># NMS方法的阈值</span>        self<span class="token punctuation">.</span>nms_thresh <span class="token operator">=</span> nms_thresh        <span class="token comment"># 去除Proposals面积小于min_size的proposals</span>        self<span class="token punctuation">.</span>min_size <span class="token operator">=</span> min_size         <span class="token comment"># box_coder可以将RPN得到的regression偏移量添加到anchors上去</span>        <span class="token keyword">if</span> box_coder <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            box_coder <span class="token operator">=</span> BoxCoder<span class="token punctuation">(</span>weights<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>box_coder <span class="token operator">=</span> box_coder         <span class="token keyword">if</span> fpn_post_nms_top_n <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            fpn_post_nms_top_n <span class="token operator">=</span> post_nms_top_n        self<span class="token punctuation">.</span>fpn_post_nms_top_n <span class="token operator">=</span> fpn_post_nms_top_n        self<span class="token punctuation">.</span>fpn_post_nms_per_batch <span class="token operator">=</span> fpn_post_nms_per_batch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、forward-函数"><a href="#2、forward-函数" class="headerlink" title="2、forward()函数"></a>2、forward()函数</h4><blockquote><p>接着我们看forward()函数，了解该类的操作流程：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> anchors<span class="token punctuation">,</span> objectness<span class="token punctuation">,</span> box_regression<span class="token punctuation">,</span> targets<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Arguments:        anchors: list[list[BoxList]]        objectness: list[tensor]        box_regression: list[tensor]    Returns:        boxlists (list[BoxList]): the post-processed anchors, after            applying box decoding and NMS    """</span>    sampled_boxes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    num_levels <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>objectness<span class="token punctuation">)</span>    anchors <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>anchors<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 对anchors进行采样 得到Proposals（包含有前面1、2、3、4 四个操作）</span>    <span class="token keyword">for</span> a<span class="token punctuation">,</span> o<span class="token punctuation">,</span> b <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>anchors<span class="token punctuation">,</span> objectness<span class="token punctuation">,</span> box_regression<span class="token punctuation">)</span><span class="token punctuation">:</span>        sampled_boxes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>forward_for_single_feature_map<span class="token punctuation">(</span>a<span class="token punctuation">,</span> o<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>     boxlists <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>sampled_boxes<span class="token punctuation">)</span><span class="token punctuation">)</span>    boxlists <span class="token operator">=</span> <span class="token punctuation">[</span>cat_boxlist<span class="token punctuation">(</span>boxlist<span class="token punctuation">)</span> <span class="token keyword">for</span> boxlist <span class="token keyword">in</span> boxlists<span class="token punctuation">]</span>     <span class="token comment"># 应该是将FPN每一层的Proposals都添加在一起（具体还没弄明白）</span>    <span class="token keyword">if</span> num_levels <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>        boxlists <span class="token operator">=</span> self<span class="token punctuation">.</span>select_over_all_levels<span class="token punctuation">(</span>boxlists<span class="token punctuation">)</span>     <span class="token comment"># append ground-truth bboxes to proposals</span>    <span class="token comment"># 将得到的Proposals和真实的标签放到一起保存</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>training <span class="token keyword">and</span> targets <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        boxlists <span class="token operator">=</span> self<span class="token punctuation">.</span>add_gt_proposals<span class="token punctuation">(</span>boxlists<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>     <span class="token comment"># 返回Proposals</span>    <span class="token keyword">return</span> boxlists<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从forward（）函数中，我们可以了解到，它主要执行的就是我上面提到的5个操作，需要重点关注的就是forward_for_single_feature_map()函数和add_gt_proposals（）函数。</p></blockquote><h4 id="3、forward-for-single-feature-map-函数"><a href="#3、forward-for-single-feature-map-函数" class="headerlink" title="3、forward_for_single_feature_map()函数"></a>3、forward_for_single_feature_map()函数</h4><blockquote><p>下面首先介绍forward_for_single_feature_map()函数: </p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">forward_for_single_feature_map</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> anchors<span class="token punctuation">,</span> objectness<span class="token punctuation">,</span> box_regression<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Arguments:        anchors: list[BoxList]        N: batch size        A: num of anchor        H: height of image        W: width of image        关于RPN得到的anchors数目，我还是简单的讲一下，        RPN是流程一般是给每一个像素点都生成9个anchors（num of anchor），        因此每一张图片中，总的anchors数目为:A * H * W        objectness: tensor of size N, A, H, W        box_regression: tensor of size N, A * 4, H, W    """</span>    device <span class="token operator">=</span> objectness<span class="token punctuation">.</span>device    N<span class="token punctuation">,</span> A<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W <span class="token operator">=</span> objectness<span class="token punctuation">.</span>shape     <span class="token comment"># put in the same format as anchors</span>    <span class="token comment"># objectness的维度为 (N, A*H*W)</span>    objectness <span class="token operator">=</span> permute_and_flatten<span class="token punctuation">(</span>objectness<span class="token punctuation">,</span> N<span class="token punctuation">,</span> A<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> H<span class="token punctuation">,</span> W<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>N<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    objectness <span class="token operator">=</span> objectness<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>     box_regression <span class="token operator">=</span> permute_and_flatten<span class="token punctuation">(</span>box_regression<span class="token punctuation">,</span> N<span class="token punctuation">,</span> A<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> H<span class="token punctuation">,</span> W<span class="token punctuation">)</span>     num_anchors <span class="token operator">=</span> A <span class="token operator">*</span> H <span class="token operator">*</span> W    <span class="token comment"># 通过对objectness置信度排序，挑选出top_n个anchors（objectness 和 box_regression）</span>    pre_nms_top_n <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>pre_nms_top_n<span class="token punctuation">,</span> num_anchors<span class="token punctuation">)</span>    objectness<span class="token punctuation">,</span> topk_idx <span class="token operator">=</span> objectness<span class="token punctuation">.</span>topk<span class="token punctuation">(</span>pre_nms_top_n<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">sorted</span><span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    batch_idx <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>N<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>    box_regression <span class="token operator">=</span> box_regression<span class="token punctuation">[</span>batch_idx<span class="token punctuation">,</span> topk_idx<span class="token punctuation">]</span>     image_shapes <span class="token operator">=</span> <span class="token punctuation">[</span>box<span class="token punctuation">.</span>size <span class="token keyword">for</span> box <span class="token keyword">in</span> anchors<span class="token punctuation">]</span>    concat_anchors <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>bbox <span class="token keyword">for</span> a <span class="token keyword">in</span> anchors<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    concat_anchors <span class="token operator">=</span> concat_anchors<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>N<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">[</span>batch_idx<span class="token punctuation">,</span> topk_idx<span class="token punctuation">]</span>     <span class="token comment"># 给筛选之后得到的anchors添加regression偏移量 得到Proposals</span>    proposals <span class="token operator">=</span> self<span class="token punctuation">.</span>box_coder<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>        box_regression<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> concat_anchors<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>     proposals <span class="token operator">=</span> proposals<span class="token punctuation">.</span>view<span class="token punctuation">(</span>N<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>     result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> proposal<span class="token punctuation">,</span> score<span class="token punctuation">,</span> im_shape <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>proposals<span class="token punctuation">,</span> objectness<span class="token punctuation">,</span> image_shapes<span class="token punctuation">)</span><span class="token punctuation">:</span>        boxlist <span class="token operator">=</span> BoxList<span class="token punctuation">(</span>proposal<span class="token punctuation">,</span> im_shape<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"xyxy"</span><span class="token punctuation">)</span>        boxlist<span class="token punctuation">.</span>add_field<span class="token punctuation">(</span><span class="token string">"objectness"</span><span class="token punctuation">,</span> score<span class="token punctuation">)</span>        boxlist <span class="token operator">=</span> boxlist<span class="token punctuation">.</span>clip_to_image<span class="token punctuation">(</span>remove_empty<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token comment"># 去除面积小于min_size的Proposals</span>        boxlist <span class="token operator">=</span> remove_small_boxes<span class="token punctuation">(</span>boxlist<span class="token punctuation">,</span> self<span class="token punctuation">.</span>min_size<span class="token punctuation">)</span>        <span class="token comment"># 对Proposals进行NMS操作得到最后的Proposals</span>        boxlist <span class="token operator">=</span> boxlist_nms<span class="token punctuation">(</span>            boxlist<span class="token punctuation">,</span>            self<span class="token punctuation">.</span>nms_thresh<span class="token punctuation">,</span>            max_proposals<span class="token operator">=</span>self<span class="token punctuation">.</span>post_nms_top_n<span class="token punctuation">,</span>            score_field<span class="token operator">=</span><span class="token string">"objectness"</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>boxlist<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、add-gt-proposals-函数"><a href="#4、add-gt-proposals-函数" class="headerlink" title="4、add_gt_proposals()函数"></a>4、add_gt_proposals()函数</h4><blockquote><p>接着要介绍的就是给筛选之后得到的Proposals和真实标签合并放到一起保存的add_gt_proposals（）函数:注：<strong>这个函数返回结果并没有将Proposals和target标签一一对应上</strong>，即并不知道哪个Proposal对应哪个target标签，只是把它们放在一起保存而已。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_gt_proposals</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> proposals<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Arguments:        proposals: list[BoxList]        targets: list[BoxList]    """</span>    <span class="token comment"># Get the device we're operating on</span>    device <span class="token operator">=</span> proposals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>bbox<span class="token punctuation">.</span>device    <span class="token comment"># 拷贝一个dataset中获得的boxlist对象（dataset中的target）（fields不进行拷贝）</span>    gt_boxes <span class="token operator">=</span> <span class="token punctuation">[</span>target<span class="token punctuation">.</span>copy_with_fields<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> target <span class="token keyword">in</span> targets<span class="token punctuation">]</span>     <span class="token comment"># later cat of bbox requires all fields to be present for all bbox</span>    <span class="token comment"># so we need to add a dummy for objectness that's missing</span>    <span class="token comment"># gt_boxes中没有任何的field</span>    <span class="token comment"># 添加一个objectness的fields</span>    <span class="token comment"># BoxList是项目内设的一个类，add_field（）方法就是添加字典数据的过程</span>    <span class="token comment"># 下面这个就是在gt_box中内置字典中，添加一个key为objectness，value为[1...1]的数据</span>        <span class="token keyword">for</span> gt_box <span class="token keyword">in</span> gt_boxes<span class="token punctuation">:</span>        gt_box<span class="token punctuation">.</span>add_field<span class="token punctuation">(</span><span class="token string">"objectness"</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>gt_box<span class="token punctuation">)</span><span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>     proposals <span class="token operator">=</span> <span class="token punctuation">[</span>        cat_boxlist<span class="token punctuation">(</span><span class="token punctuation">(</span>proposal<span class="token punctuation">,</span> gt_box<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> proposal<span class="token punctuation">,</span> gt_box <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>proposals<span class="token punctuation">,</span> gt_boxes<span class="token punctuation">)</span>    <span class="token punctuation">]</span>     <span class="token keyword">return</span> proposals<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、make-rpn-postprocessor-函数"><a href="#5、make-rpn-postprocessor-函数" class="headerlink" title="5、make_rpn_postprocessor()函数"></a>5、make_rpn_postprocessor()函数</h4><blockquote><p>最后我们看到make_rpn_postprocessor()函数，看名字我们就知道这个函数就是用来获取 RPNPostProcessor类对象的：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_rpn_postprocessor</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> rpn_box_coder<span class="token punctuation">,</span> is_train<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 设置nms之后保留的Proposals数目（有FPN的情况）</span>    fpn_post_nms_top_n <span class="token operator">=</span> config<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RPN<span class="token punctuation">.</span>FPN_POST_NMS_TOP_N_TRAIN    <span class="token keyword">if</span> <span class="token keyword">not</span> is_train<span class="token punctuation">:</span>        fpn_post_nms_top_n <span class="token operator">=</span> config<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RPN<span class="token punctuation">.</span>FPN_POST_NMS_TOP_N_TEST     <span class="token comment"># 设置 通过RPN输出anchor的二分类置信度进行筛选 最后保留的anchor数目（有点拗口~）</span>    pre_nms_top_n <span class="token operator">=</span> config<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RPN<span class="token punctuation">.</span>PRE_NMS_TOP_N_TRAIN    <span class="token comment"># 设置nms之后保留的Proposals数目</span>    post_nms_top_n <span class="token operator">=</span> config<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RPN<span class="token punctuation">.</span>POST_NMS_TOP_N_TRAIN    <span class="token keyword">if</span> <span class="token keyword">not</span> is_train<span class="token punctuation">:</span>        pre_nms_top_n <span class="token operator">=</span> config<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RPN<span class="token punctuation">.</span>PRE_NMS_TOP_N_TEST        post_nms_top_n <span class="token operator">=</span> config<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RPN<span class="token punctuation">.</span>POST_NMS_TOP_N_TEST    fpn_post_nms_per_batch <span class="token operator">=</span> config<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RPN<span class="token punctuation">.</span>FPN_POST_NMS_PER_BATCH    <span class="token comment"># 设置NMS阈值</span>    nms_thresh <span class="token operator">=</span> config<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RPN<span class="token punctuation">.</span>NMS_THRESH    <span class="token comment"># 设置最小的Proposals面积大小</span>    min_size <span class="token operator">=</span> config<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RPN<span class="token punctuation">.</span>MIN_SIZE    <span class="token comment"># 创建RPNPostProcessor对象</span>    box_selector <span class="token operator">=</span> RPNPostProcessor<span class="token punctuation">(</span>        pre_nms_top_n<span class="token operator">=</span>pre_nms_top_n<span class="token punctuation">,</span>        post_nms_top_n<span class="token operator">=</span>post_nms_top_n<span class="token punctuation">,</span>        nms_thresh<span class="token operator">=</span>nms_thresh<span class="token punctuation">,</span>        min_size<span class="token operator">=</span>min_size<span class="token punctuation">,</span>        box_coder<span class="token operator">=</span>rpn_box_coder<span class="token punctuation">,</span>        fpn_post_nms_top_n<span class="token operator">=</span>fpn_post_nms_top_n<span class="token punctuation">,</span>        fpn_post_nms_per_batch<span class="token operator">=</span>fpn_post_nms_per_batch<span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token comment"># 返回RPNPostProcessor类对象</span>    <span class="token keyword">return</span> box_selector<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、BoxList"><a href="#二、BoxList" class="headerlink" title="二、BoxList"></a>二、BoxList</h3><blockquote><p>这个类本身是不在inference.py这个文件中的，但是这个类又在inference.py中反复出现，并且贯穿了整个数据流过程，因此还是决定放在这里介绍一下。</p><p>BoxList定义在your_project/maskrcnn_benchmark/structures/bounding_box.py文件中，并且在your_project/ABSTRACTIONS.md中有简单的注释介绍，在此我就将其英文的注释介绍<strong>翻译 翻译</strong></p></blockquote><p>以下是英文部分：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">### BoxList</span>The `BoxList` <span class="token keyword">class</span> <span class="token class-name">holds</span> a <span class="token builtin">set</span> of bounding boxes <span class="token punctuation">(</span>represented <span class="token keyword">as</span> a `Nx4` tensor<span class="token punctuation">)</span> <span class="token keyword">for</span>a specific image<span class="token punctuation">,</span> <span class="token keyword">as</span> well <span class="token keyword">as</span> the size of the image <span class="token keyword">as</span> a `<span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>` <span class="token builtin">tuple</span><span class="token punctuation">.</span>It also contains a <span class="token builtin">set</span> of methods that allow to perform geometrictransformations to the bounding boxes <span class="token punctuation">(</span>such <span class="token keyword">as</span> cropping<span class="token punctuation">,</span> scaling <span class="token keyword">and</span> flipping<span class="token punctuation">)</span><span class="token punctuation">.</span>The <span class="token keyword">class</span> <span class="token class-name">accepts</span> bounding boxes <span class="token keyword">from</span> two different <span class="token builtin">input</span> formats<span class="token punctuation">:</span><span class="token operator">-</span> `xyxy`<span class="token punctuation">,</span> where each box <span class="token keyword">is</span> encoded <span class="token keyword">as</span> a `x1`<span class="token punctuation">,</span> `y1`<span class="token punctuation">,</span> `x2` <span class="token keyword">and</span> `y2` coordinates<span class="token punctuation">,</span> <span class="token keyword">and</span><span class="token operator">-</span> `xywh`<span class="token punctuation">,</span> where each box <span class="token keyword">is</span> encoded <span class="token keyword">as</span> `x1`<span class="token punctuation">,</span> `y1`<span class="token punctuation">,</span> `w` <span class="token keyword">and</span> `h`<span class="token punctuation">.</span> Additionally<span class="token punctuation">,</span> each `BoxList` instance can also hold arbitrary additional information<span class="token keyword">for</span> each bounding box<span class="token punctuation">,</span> such <span class="token keyword">as</span> labels<span class="token punctuation">,</span> visibility<span class="token punctuation">,</span> probability scores etc<span class="token punctuation">.</span> Here <span class="token keyword">is</span> an example on how to create a `BoxList` <span class="token keyword">from</span> a <span class="token builtin">list</span> of coordinates<span class="token punctuation">:</span>```python<span class="token keyword">from</span> maskrcnn_benchmark<span class="token punctuation">.</span>structures<span class="token punctuation">.</span>bounding_box <span class="token keyword">import</span> BoxList<span class="token punctuation">,</span> FLIP_LEFT_RIGHT<span class="token keyword">import</span> torch width <span class="token operator">=</span> <span class="token number">100</span>height <span class="token operator">=</span> <span class="token number">200</span>boxes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># create a BoxList with 3 boxes</span>bbox <span class="token operator">=</span> BoxList<span class="token punctuation">(</span>boxes<span class="token punctuation">,</span> image_size<span class="token operator">=</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'xyxy'</span><span class="token punctuation">)</span> <span class="token comment"># perform some box transformations, has similar API as PIL.Image</span>bbox_scaled <span class="token operator">=</span> bbox<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span>width <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> height <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bbox_flipped <span class="token operator">=</span> bbox<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>FLIP_LEFT_RIGHT<span class="token punctuation">)</span> <span class="token comment"># add labels for each bbox</span>labels <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>bbox<span class="token punctuation">.</span>add_field<span class="token punctuation">(</span><span class="token string">'labels'</span><span class="token punctuation">,</span> labels<span class="token punctuation">)</span> <span class="token comment"># bbox also support a few operations, like indexing</span><span class="token comment"># here, selects boxes 0 and 2</span>bbox_subset <span class="token operator">=</span> bbox<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>至此，关于RPN module获取Proposals的过程已经介绍完了，至于如何将相应的anchors和Target标签一一对应计算相应的loss？</p><p>将放在下一篇介绍：<a href="https://kingpopen.github.io/2021/08/01/maskrcnn-benchmark-master-liu-rpn-de-loss-wen-jian/">maskrcnn-benchmark-master（六）：RPN的loss文件</a></p><p>码字不易  未经许可  请勿随意转载！</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> MaskRCNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maskrcnn-benchmark-master（四）：build_rpn()函数</title>
      <link href="/2021/07/27/maskrcnn-benchmark-master-si-build-rpn-han-shu/"/>
      <url>/2021/07/27/maskrcnn-benchmark-master-si-build-rpn-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>上面我们介绍了build_bone()函数，了解到了backbone的构造过程，本篇我们开始介绍RPN的构造过程。build_rpn()函数是在your_project/maskrcnn_benchmark/modeling/rpn/rpn.py文件中。</p><p>我们知道RPN过程是提取Proposals的过程，即判断哪一个区域可能含有需要检测的物体（二分类，有或无，并不判断具体是什么类别的物体），以及该物体的bounding box，具体的内容可以看相关Faster-RCNN论文，本篇论文不做具体阐述，简单的RPN细节，如下图所示：</p></blockquote><p><img src="1.jpg" alt="图1 RPN网络结构图"></p><blockquote><p>rpn.py中总共包含有：</p><p><strong>RPNHeadConvRegressor类、RPNHeadFeatureSingleConv类、RPNHead类、RPNModule类、build_rpn（）函数</strong>这五个部分，下面就这五个部分一一介绍：</p></blockquote><h3 id="一、RPNHeadFeatureSingleConv类"><a href="#一、RPNHeadFeatureSingleConv类" class="headerlink" title="一、RPNHeadFeatureSingleConv类"></a>一、<strong>RPNHeadFeatureSingleConv</strong>类</h3><blockquote><p>参照我上面画的RPN结构示意图，Backbone提取的图像特征进入RPN模块之后，首先通过一个3x3Conv提取特征，<strong>RPNHeadFeatureSingleConv</strong>类就是这个作用：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># RPN中用来提取特征的单个卷积层head模块</span><span class="token keyword">class</span> <span class="token class-name">RPNHeadFeatureSingleConv</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Adds a simple RPN Head with one conv to extract the feature    """</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cfg<span class="token punctuation">,</span> in_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Arguments:            cfg              : config            in_channels (int): number of channels of the input feature        """</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>RPNHeadFeatureSingleConv<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 3*3卷积用于提取特征</span>        self<span class="token punctuation">.</span>conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>            in_channels<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span>        <span class="token punctuation">)</span>        <span class="token comment"># 参数初始化</span>        <span class="token keyword">for</span> l <span class="token keyword">in</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>conv<span class="token punctuation">]</span><span class="token punctuation">:</span>            torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>l<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>l<span class="token punctuation">.</span>bias<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment"># 不改变输入输出的特征维度</span>        self<span class="token punctuation">.</span>out_channels <span class="token operator">=</span> in_channels     <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 因为batch size的缘故使用这种方式进行计算</span>        x <span class="token operator">=</span> <span class="token punctuation">[</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> z <span class="token keyword">in</span> x<span class="token punctuation">]</span>        <span class="token comment"># 返回值为经过3x3CONV提取的特征</span>        <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、RPNHeadConvRegressor类"><a href="#二、RPNHeadConvRegressor类" class="headerlink" title="二、RPNHeadConvRegressor类"></a>二、RPNHeadConvRegressor类</h3><blockquote><p>在经过了3x3CONV操作之后，就要进行bounding box的回归和2分类任务（有物体还是没有物体）,这便是<strong>RPNHeadConvRegressor</strong>类的作用：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># RPN中用来进行回归和分类的head模块</span><span class="token keyword">class</span> <span class="token class-name">RPNHeadConvRegressor</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    A simple RPN Head for classification and bbox regression    """</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cfg<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> num_anchors<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Arguments:            cfg              : config            in_channels (int): number of channels of the input feature            num_anchors (int): number of anchors to be predicted        """</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>RPNHeadConvRegressor<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># 使用1*1的卷积将输入的feature的维度转化为预测的anchors的数目（2分类）</span>        self<span class="token punctuation">.</span>cls_logits <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> num_anchors<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># 使用1*1的卷积将输入的feature的维度转化为预测的anchors*4的数目（回归对应到4个坐标点，虽然四个值不是对应四个点，但是可以通过函数转换过去）</span>        self<span class="token punctuation">.</span>bbox_pred <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>            in_channels<span class="token punctuation">,</span> num_anchors <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span>        <span class="token punctuation">)</span>        <span class="token comment"># 初始化 cls__logits和 bbox_pred</span>         <span class="token keyword">for</span> l <span class="token keyword">in</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>cls_logits<span class="token punctuation">,</span> self<span class="token punctuation">.</span>bbox_pred<span class="token punctuation">]</span><span class="token punctuation">:</span>            torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>l<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>l<span class="token punctuation">.</span>bias<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        logits <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>cls_logits<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> x<span class="token punctuation">]</span>        bbox_reg <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>bbox_pred<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> x<span class="token punctuation">]</span>        <span class="token comment"># 返回值为Proposals（即每一个anchor的二分类结果以及它的坐标偏移量）</span>        <span class="token keyword">return</span> logits<span class="token punctuation">,</span> bbox_reg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、RPNHead类"><a href="#三、RPNHead类" class="headerlink" title="三、RPNHead类"></a>三、RPNHead类</h3><blockquote><p>其实就是把RPNHeadConvRegressor类和RPNHeadConvRegressor类中的相关操作，整合到一个类当中（先进行3x3CONV 然后进行anchor的bounding box回归和二分类）:</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 单卷积层的RPN head（里面包含单卷积head 和 分类回归head）</span><span class="token comment"># 通过注册器在RPN_HEADS中注册该RPNHead类 方便后面通过字典的形式进行获取</span><span class="token decorator annotation punctuation">@registry<span class="token punctuation">.</span>RPN_HEADS<span class="token punctuation">.</span>register</span><span class="token punctuation">(</span><span class="token string">"SingleConvRPNHead"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">RPNHead</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Adds a simple RPN Head with classification and regression heads    """</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cfg<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> num_anchors<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Arguments:            cfg              : config            in_channels (int): number of channels of the input feature            num_anchors (int): number of anchors to be predicted        """</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>RPNHead<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 单层3*3卷积特征提取</span>        self<span class="token punctuation">.</span>conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>            in_channels<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span>        <span class="token punctuation">)</span>        <span class="token comment"># 2分类</span>        self<span class="token punctuation">.</span>cls_logits <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> num_anchors<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># bbox回归</span>        self<span class="token punctuation">.</span>bbox_pred <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>            in_channels<span class="token punctuation">,</span> num_anchors <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span>        <span class="token punctuation">)</span>         <span class="token keyword">for</span> l <span class="token keyword">in</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>conv<span class="token punctuation">,</span> self<span class="token punctuation">.</span>cls_logits<span class="token punctuation">,</span> self<span class="token punctuation">.</span>bbox_pred<span class="token punctuation">]</span><span class="token punctuation">:</span>            torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>l<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>l<span class="token punctuation">.</span>bias<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        logits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        bbox_reg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> feature <span class="token keyword">in</span> x<span class="token punctuation">:</span>            t <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>feature<span class="token punctuation">)</span><span class="token punctuation">)</span>            logits<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cls_logits<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>            bbox_reg<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bbox_pred<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> logits<span class="token punctuation">,</span> bbox_reg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、RPNModule类"><a href="#四、RPNModule类" class="headerlink" title="四、RPNModule类"></a>四、RPNModule类</h3><blockquote><p>总的来说上面都是介绍了RPN（Region Proposal Network）的网络结构相关内容，经过RPNHead类得到也是anchors的分类结果和anchors坐标的回归结果，但是并没有涉及应该使用哪些anchors（我们将RPN分类结果为：“有物体” 的anchors，称之为Proposals）用于训练？在训练过程如何进行loss的计算？</p><p>而RPNModule类就是将上述提到问题都进行解决，然后整合的一个模块。下面是RPNModule中重点的几个函数，以及它们的作用：</p><p>make_anchor_generator（）：为每一个像素点生成anchor（每一个像素点一般都会生成9个anchors）</p><p>make_rpn_postprocessor（）：挑选用于训练和测试过程的anchors，并返回最后筛选得到的proposals和用于训练的标签。</p><p>make_rpn_loss_evaluator（）：用于计算RPN这一部分的loss。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RPNModule</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Module for RPN computation. Takes feature maps from the backbone and outputs     RPN proposals and losses. Works for both FPN and non-FPN.    通过注释我们就可以明白：                            该模块的输入是backbone提取得到的feature                            输出是RPN的proposals和loss值    """</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cfg<span class="token punctuation">,</span> in_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>RPNModule<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>cfg <span class="token operator">=</span> cfg<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># 生成anchors（anchors具体是如何生成的，这里就不介绍了）</span>        anchor_generator <span class="token operator">=</span> make_anchor_generator<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span>        <span class="token comment"># 通过注册器得到cfg中对应的rpn_head</span>        rpn_head <span class="token operator">=</span> registry<span class="token punctuation">.</span>RPN_HEADS<span class="token punctuation">[</span>cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RPN<span class="token punctuation">.</span>RPN_HEAD<span class="token punctuation">]</span>        head <span class="token operator">=</span> rpn_head<span class="token punctuation">(</span>            cfg<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> anchor_generator<span class="token punctuation">.</span>num_anchors_per_location<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token punctuation">)</span>         <span class="token comment"># 边框编码器， 主要用于计算边框偏差以及利用偏差计算预测框（就是预测的四个点并不是坐标框的四个点，需要通过函数转化一下）</span>        rpn_box_coder <span class="token operator">=</span> BoxCoder<span class="token punctuation">(</span>weights<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># 指定获得预测边框的工具类，将RPN得到的box进行后续处理，用作下一个阶段head的输入</span>        <span class="token comment"># 在RPN损失计算部分的anchors和用于后续阶段的Proposals对应的anchors 并不完全一样</span>        box_selector_train <span class="token operator">=</span> make_rpn_postprocessor<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> rpn_box_coder<span class="token punctuation">,</span> is_train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        box_selector_test <span class="token operator">=</span> make_rpn_postprocessor<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> rpn_box_coder<span class="token punctuation">,</span> is_train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>         <span class="token comment"># 指定RPN误差计算的工具类</span>        loss_evaluator <span class="token operator">=</span> make_rpn_loss_evaluator<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> rpn_box_coder<span class="token punctuation">)</span>         self<span class="token punctuation">.</span>anchor_generator <span class="token operator">=</span> anchor_generator        self<span class="token punctuation">.</span>head <span class="token operator">=</span> head        self<span class="token punctuation">.</span>box_selector_train <span class="token operator">=</span> box_selector_train        self<span class="token punctuation">.</span>box_selector_test <span class="token operator">=</span> box_selector_test        self<span class="token punctuation">.</span>loss_evaluator <span class="token operator">=</span> loss_evaluator     <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> images<span class="token punctuation">,</span> features<span class="token punctuation">,</span> targets<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Arguments:            images (ImageList): images for which we want to compute the predictions            features (list[Tensor]): features computed from the images that are                used for computing the predictions. Each tensor in the list                correspond to different feature levels            targets (list[BoxList): ground-truth boxes present in the image (optional)            输入：            images:图片的张量列表            features：backbone所提取的特征图            targets: 图片的ground truth标签        Returns:            boxes (list[BoxList]): the predicted boxes from the RPN, one BoxList per                image.            losses (dict[Tensor]): the losses for the model during training. During                testing, it is an empty dict.            返回值：            boxes：RPN预测的边框， 一张图对应一个边框列表（边框列表里面有很多边框）            losses：训练过程所对应的损失（如果是测试阶段这个地方就为空）        """</span>        <span class="token comment"># RPN head得到每一个像素点所对应的多个anchors回归偏量</span>          以及anchors中是否含有物体的二分类结果（anchors）        <span class="token comment"># objectness是指二分类的结果</span>        objectness<span class="token punctuation">,</span> rpn_box_regression <span class="token operator">=</span> self<span class="token punctuation">.</span>head<span class="token punctuation">(</span>features<span class="token punctuation">)</span>        anchors <span class="token operator">=</span> self<span class="token punctuation">.</span>anchor_generator<span class="token punctuation">(</span>images<span class="token punctuation">,</span> features<span class="token punctuation">)</span>         <span class="token keyword">if</span> self<span class="token punctuation">.</span>training<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>_forward_train<span class="token punctuation">(</span>anchors<span class="token punctuation">,</span> objectness<span class="token punctuation">,</span> rpn_box_regression<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>_forward_test<span class="token punctuation">(</span>anchors<span class="token punctuation">,</span> objectness<span class="token punctuation">,</span> rpn_box_regression<span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">_forward_train</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> anchors<span class="token punctuation">,</span> objectness<span class="token punctuation">,</span> rpn_box_regression<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RPN_ONLY<span class="token punctuation">:</span>            <span class="token comment"># When training an RPN-only model, the loss is determined by the</span>            <span class="token comment"># predicted objectness and rpn_box_regression values and there is</span>            <span class="token comment"># no need to transform the anchors into predicted boxes; this is an</span>            <span class="token comment"># optimization that avoids the unnecessary transformation.</span>            boxes <span class="token operator">=</span> anchors        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># For end-to-end models, anchors must be transformed into boxes and</span>            <span class="token comment"># sampled into a training batch.</span>            <span class="token comment"># 需要挑选出一部分box（Proposals）用于 下一个阶段的训练</span>            <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                boxes <span class="token operator">=</span> self<span class="token punctuation">.</span>box_selector_train<span class="token punctuation">(</span>                    anchors<span class="token punctuation">,</span> objectness<span class="token punctuation">,</span> rpn_box_regression<span class="token punctuation">,</span> targets                <span class="token punctuation">)</span>        <span class="token comment"># RPN的loss是计算了所有的anchors的loss，而不是仅仅是用于下一阶段boxs（Proposals）的loss</span>        loss_objectness<span class="token punctuation">,</span> loss_rpn_box_reg <span class="token operator">=</span> self<span class="token punctuation">.</span>loss_evaluator<span class="token punctuation">(</span>            anchors<span class="token punctuation">,</span> objectness<span class="token punctuation">,</span> rpn_box_regression<span class="token punctuation">,</span> targets        <span class="token punctuation">)</span>        losses <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"loss_objectness"</span><span class="token punctuation">:</span> loss_objectness<span class="token punctuation">,</span>            <span class="token string">"loss_rpn_box_reg"</span><span class="token punctuation">:</span> loss_rpn_box_reg<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> boxes<span class="token punctuation">,</span> losses     <span class="token keyword">def</span> <span class="token function">_forward_test</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> anchors<span class="token punctuation">,</span> objectness<span class="token punctuation">,</span> rpn_box_regression<span class="token punctuation">)</span><span class="token punctuation">:</span>        boxes <span class="token operator">=</span> self<span class="token punctuation">.</span>box_selector_test<span class="token punctuation">(</span>anchors<span class="token punctuation">,</span> objectness<span class="token punctuation">,</span> rpn_box_regression<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RPN_ONLY<span class="token punctuation">:</span>            <span class="token comment"># For end-to-end models, the RPN proposals are an intermediate state</span>            <span class="token comment"># and don't bother to sort them in decreasing score order. For RPN-only</span>            <span class="token comment"># models, the proposals are the final output and we return them in</span>            <span class="token comment"># high-to-low confidence order.</span>            <span class="token comment"># RPN-ONLY模型boxes就是最后的输出，对其进行排序</span>            inds <span class="token operator">=</span> <span class="token punctuation">[</span>                box<span class="token punctuation">.</span>get_field<span class="token punctuation">(</span><span class="token string">"objectness"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>descending<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> box <span class="token keyword">in</span> boxes            <span class="token punctuation">]</span>            boxes <span class="token operator">=</span> <span class="token punctuation">[</span>box<span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token keyword">for</span> box<span class="token punctuation">,</span> ind <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>boxes<span class="token punctuation">,</span> inds<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> boxes<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果想要读懂RPNModule类具体干了一些啥，就需要先阅读：</p><p>在your_project/maskrcnn_benchmark/modeling/rpn/inference.py中的make_rpn_postprocessor()函数</p><p>以及your_project/maskrcnn_benchmark/modeling/rpn/loss.py中的make_rpn_loss_evaluator()函数 (make_anchor_generator就不做介绍了)：</p><p><a href="https://kingpopen.github.io/2021/07/27/maskrcnn-benchmark-master-wu-rpn-de-inference-wen-jian/">maskrcnn-benchmark-master（五）：RPN的inference文件</a></p><p><a href="https://kingpopen.github.io/2021/08/01/maskrcnn-benchmark-master-liu-rpn-de-loss-wen-jian/">maskrcnn-benchmark-master（六）：RPN的loss文件</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> MaskRCNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maskrcnn-benchmark-master（三）：build_backbone()函数</title>
      <link href="/2021/07/27/maskrcnn-benchmark-master-san-build-backbone-han-shu/"/>
      <url>/2021/07/27/maskrcnn-benchmark-master-san-build-backbone-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>通过之前的介绍，我们知道build_backbone()函数的作用就是生成一个backbone（backbone的作用就是提取图像特征）。其实本身build_backbone（）函数当中没有多少好讲的，但里面用到了一个registry的类，其他的好多函数中都有用到这个类，所以registry就放到本篇博客中一起介绍。</p></blockquote><h3 id="一、Registry"><a href="#一、Registry" class="headerlink" title="一、Registry"></a>一、Registry</h3><blockquote><p>build_backbone（）函数是在<strong>your_project/maskrcnn_benchmark/modeling/backbone/backbone.py</strong>文件中，当打开这个backbone.py这个文件，就会发现有好多如下代码：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> maskrcnn_benchmark<span class="token punctuation">.</span>modeling <span class="token keyword">import</span> registry<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token decorator annotation punctuation">@registry<span class="token punctuation">.</span>BACKBONES<span class="token punctuation">.</span>register</span><span class="token punctuation">(</span><span class="token string">"R-50-C4"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@registry<span class="token punctuation">.</span>BACKBONES<span class="token punctuation">.</span>register</span><span class="token punctuation">(</span><span class="token string">"R-50-C5"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@registry<span class="token punctuation">.</span>BACKBONES<span class="token punctuation">.</span>register</span><span class="token punctuation">(</span><span class="token string">"R-101-C4"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@registry<span class="token punctuation">.</span>BACKBONES<span class="token punctuation">.</span>register</span><span class="token punctuation">(</span><span class="token string">"R-101-C5"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>那么接下来我就要好好了解一下，registry究竟是一个什么？</p><p>Registry类是在your_project/maskrcnn_benchmark/utils/registry.py文件中进行定义的：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_register_generic</span><span class="token punctuation">(</span>module_dict<span class="token punctuation">,</span> module_name<span class="token punctuation">,</span> module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> module_name <span class="token keyword">not</span> <span class="token keyword">in</span> module_dict    module_dict<span class="token punctuation">[</span>module_name<span class="token punctuation">]</span> <span class="token operator">=</span> module  <span class="token keyword">class</span> <span class="token class-name">Registry</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    A helper class for managing registering modules, it extends a dictionary    and provides a register functions.    Eg. creeting a registry:        some_registry = Registry({"default": default_module})    There're two ways of registering new modules:    1): normal way is just calling register function:        def foo():            ...        some_registry.register("foo_module", foo)    2): used as decorator when declaring the module:        @some_registry.register("foo_module")        @some_registry.register("foo_module_nickname")        def foo():            ...    Access of module is just like using a dictionary, eg:        f = some_registry["foo_module"]    '''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Registry<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token comment"># 就是一个装饰器</span>    <span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> module_name<span class="token punctuation">,</span> module<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># used as function call</span>        <span class="token keyword">if</span> module <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token comment"># 该函数是将module_name 和 moudle 以key 和 value 的形式加到字典当中去</span>            _register_generic<span class="token punctuation">(</span>self<span class="token punctuation">,</span> module_name<span class="token punctuation">,</span> module<span class="token punctuation">)</span>            <span class="token keyword">return</span>         <span class="token comment"># used as decorator</span>        <span class="token keyword">def</span> <span class="token function">register_fn</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>            _register_generic<span class="token punctuation">(</span>self<span class="token punctuation">,</span> module_name<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>            <span class="token keyword">return</span> fn         <span class="token keyword">return</span> register_fn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我来给大家 <strong>翻译 翻译</strong> 上面一大段的函数相关介绍注释 都说了写啥：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"> Registry是一个用来管理注册模块的helper类，它继承了一个字典类，并且添加了register方法。举一个如何使用的例子：<span class="token number">1</span>、创建一个registry对象    some_registry <span class="token operator">=</span> Registry<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span>有没有参数都可以<span class="token punctuation">)</span><span class="token number">2</span>、注册新的模块 （有两种方式）   方式一：正常的方式是调用register函数进行注册：         <span class="token comment"># 首先定义一个模块 foo</span>         <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token comment"># 然后在registry对象上注册它  </span>         <span class="token comment"># foo_module相当于字典的key，foo相当于字典的value(简单吧 hhh)</span>         some_registry<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">"foo_module"</span><span class="token punctuation">,</span> foo<span class="token punctuation">)</span>   方式二：在声明某个模块时，作为一个装饰器使用：         <span class="token decorator annotation punctuation">@some_registry<span class="token punctuation">.</span>register</span><span class="token punctuation">(</span><span class="token string">"foo_module"</span><span class="token punctuation">)</span>         <span class="token decorator annotation punctuation">@some_registry<span class="token punctuation">.</span>register</span><span class="token punctuation">(</span><span class="token string">"foo_module_nickname"</span><span class="token punctuation">)</span>          <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token comment"># 效果等同于  ：some_registry.register("foo_module", foo)</span>         <span class="token comment">#              some_registry.register("foo_module_nickname", foo)</span> <span class="token number">3</span>、获取被注册的模块<span class="token punctuation">(</span>像使用字典一样<span class="token punctuation">)</span>      f <span class="token operator">=</span> some_registry<span class="token punctuation">[</span><span class="token string">"foo_module"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、Backbone"><a href="#二、Backbone" class="headerlink" title="二、Backbone"></a>二、Backbone</h3><blockquote><p>好！有了上面Registry的介绍，我再来看看backbone.py文件就会轻松很多。在backbone.py中registry大都是通过方式二：作为一种装饰器使用的，如下例：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 相当于在BACKBONES的字典中注册了"R-50-C4"、"R-50-C5"、"R-101-C4"、"R-101-C5"这几个key </span><span class="token comment"># 它们对应的value都是 build_resnet_backbone()这个函数</span><span class="token decorator annotation punctuation">@registry<span class="token punctuation">.</span>BACKBONES<span class="token punctuation">.</span>register</span><span class="token punctuation">(</span><span class="token string">"R-50-C4"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@registry<span class="token punctuation">.</span>BACKBONES<span class="token punctuation">.</span>register</span><span class="token punctuation">(</span><span class="token string">"R-50-C5"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@registry<span class="token punctuation">.</span>BACKBONES<span class="token punctuation">.</span>register</span><span class="token punctuation">(</span><span class="token string">"R-101-C4"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@registry<span class="token punctuation">.</span>BACKBONES<span class="token punctuation">.</span>register</span><span class="token punctuation">(</span><span class="token string">"R-101-C5"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">build_resnet_backbone</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 通过cfg来决定resnet是50还是101</span>    body <span class="token operator">=</span> resnet<span class="token punctuation">.</span>ResNet<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span>    model <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 通过cfg来决定输出是C4还是C5</span>    model<span class="token punctuation">.</span>out_channels <span class="token operator">=</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RESNETS<span class="token punctuation">.</span>BACKBONE_OUT_CHANNELS    <span class="token keyword">return</span> model<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 后面的几个都是类似的情况，就不一一展开了~</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我们接着看到build_backbone(cfg)函数，它就是返回backbone的函数：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">build_backbone</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>BACKBONE<span class="token punctuation">.</span>CONV_BODY <span class="token keyword">in</span> registry<span class="token punctuation">.</span>BACKBONES<span class="token punctuation">,</span> \        <span class="token string">"cfg.MODEL.BACKBONE.CONV_BODY: {} are not registered in registry"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>            cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>BACKBONE<span class="token punctuation">.</span>CONV_BODY        <span class="token punctuation">)</span>    <span class="token comment"># backbone的类型通过配置文件中的CONV_BODY来决定</span>    <span class="token comment"># registry.BACKBONES[***]是获取对应的注册器字典中的value (当前场景中value是一个函数)</span>    <span class="token comment"># 然后对获取的函数输入形参cfg  返回一个backbone模型对象。</span>    ···      <span class="token comment"># 等价于如下</span>      foo <span class="token operator">=</span> registry<span class="token punctuation">.</span>BACKBONES<span class="token punctuation">[</span>cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>BACKBONE<span class="token punctuation">.</span>CONV_BODY<span class="token punctuation">]</span>      backbone <span class="token operator">=</span> foo<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span>      <span class="token keyword">return</span> backbone     ···<span class="token keyword">return</span> registry<span class="token punctuation">.</span>BACKBONES<span class="token punctuation">[</span>cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>BACKBONE<span class="token punctuation">.</span>CONV_BODY<span class="token punctuation">]</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>至此backbone的获取过程就介绍完了，本篇内容并没有涉及到backbone中ResNet网络，FPN网络是如何构造的，如果需要了解相关细节，可以查看其源代码。</p><p>本篇只是简单介绍了整个build_backbone（）函数的调用过程，既然已经构造好了backbone，那么接下来就是构造RPN，下面一篇将介绍RPN的构造。</p><p><a href="https://kingpopen.github.io/2021/07/27/maskrcnn-benchmark-master-si-build-rpn-han-shu/">maskrcnn-benchmark-master（四）：build_rpn()函数</a></p></blockquote><p>参考链接：<a href="https://blog.csdn.net/RadiantJeral/article/details/103433169">https://blog.csdn.net/RadiantJeral/article/details/103433169</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> MaskRCNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maskrcnn-benckmark-master （二）：GeneralizedRCNN类</title>
      <link href="/2021/07/27/maskrcnn-benckmark-master-er-generalizedrcnn-lei/"/>
      <url>/2021/07/27/maskrcnn-benckmark-master-er-generalizedrcnn-lei/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>上次介绍到了配置文件如何使用，以及配置文件cfg对象最后传到了一个GeneralizedRCNN类中。本篇，我们介绍一下GeneralizedRCNN类究竟是怎么构建出一个模型的。GeneralizedRCNN结构简图如下所示：</p></blockquote><p><img src="GeneralizedRCNN%E7%BB%93%E6%9E%84%E5%9B%BE.jpg" alt="图1 GeneralizedRCNN结构图"></p><h3 id="一、GeneralizedRCNN类"><a href="#一、GeneralizedRCNN类" class="headerlink" title="一、GeneralizedRCNN类"></a>一、GeneralizedRCNN类</h3><blockquote><p>GeneralizedRCNN类在<strong>your_project/maskrcnn_benchmark/modeling/detector/generalized_rcnn.py</strong>文件中，我们首先看构造函数**<em>init</em>()**:</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>GeneralizedRCNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token triple-quoted-string string">'''        build_backbone()  build_rpn()  build_roi_heads()重点需要了解的函数        build_backbone()主要是创建ResNet+FPN等特征提取网络        build_rpn()主要是创建RPN结构        build_roi_heads()主要是创建ROI box head  ROI mask head等结构                '''</span>         <span class="token comment"># 创建骨干网络</span>        self<span class="token punctuation">.</span>backbone <span class="token operator">=</span> build_backbone<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span>        <span class="token comment"># 创建rpn</span>        self<span class="token punctuation">.</span>rpn <span class="token operator">=</span> build_rpn<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> self<span class="token punctuation">.</span>backbone<span class="token punctuation">.</span>out_channels<span class="token punctuation">)</span>        <span class="token comment"># 创建roi_heads</span>        self<span class="token punctuation">.</span>roi_heads <span class="token operator">=</span> build_roi_heads<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> self<span class="token punctuation">.</span>backbone<span class="token punctuation">.</span>out_channels<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从构造函数可以看出，整个网络主要由3个部分组成：backbone、rpn、roi_heads。（以类变量的形式存在）</p><p>而这三个部分主要是由build_backbone（）、build_rpn（）、build_roi_heads（）三个函数所生成，我后面会依次介绍这三个函数。</p><p>接着，我们看一下GeneralizedRCNN类的forward()函数，观察上面上面三个类变量是如何进行工作的:</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> images<span class="token punctuation">,</span> targets<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Arguments:        images (list[Tensor] or ImageList): images to be processed        targets (list[BoxList]): ground-truth boxes present in the image (optional)    Returns:        result (list[BoxList] or dict[Tensor]): the output from the model.            During training, it returns a dict[Tensor] which contains the losses.            训练阶段返回loss值            During testing, it returns list[BoxList] contains additional fields            like `scores`, `labels` and `mask` (for Mask R-CNN models).            测试阶段返回预测的结果（得分， 标签， mask）    """</span>     <span class="token comment"># 训练过程，输入的数据必须有对应的标签，不然没法计算损失</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>training <span class="token keyword">and</span> targets <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"In training mode, targets should be passed"</span><span class="token punctuation">)</span>    images <span class="token operator">=</span> to_image_list<span class="token punctuation">(</span>images<span class="token punctuation">)</span>    <span class="token comment"># 图像经过backbone之后  输出提取的图像特征</span>    features <span class="token operator">=</span> self<span class="token punctuation">.</span>backbone<span class="token punctuation">(</span>images<span class="token punctuation">.</span>tensors<span class="token punctuation">)</span>    <span class="token comment"># 特征经过RPN网络得到proposals和相应的loss值（因此RPN的作用就是获取Proposals和训练时RPN的loss）</span>    <span class="token comment"># self.rpn返回值的proposals中是cat_Boxlist得到的结果list(BoxList) shape is （batch size，）</span>    proposals<span class="token punctuation">,</span> proposal_losses <span class="token operator">=</span> self<span class="token punctuation">.</span>rpn<span class="token punctuation">(</span>images<span class="token punctuation">,</span> features<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>roi_heads<span class="token punctuation">:</span>        <span class="token comment"># result是检测的结果，detection_losses的损失（如果存在mask分支，result和detection_loss都是包含有mask的检测结果和mask的损失的）</span>        x<span class="token punctuation">,</span> result<span class="token punctuation">,</span> detector_losses <span class="token operator">=</span> self<span class="token punctuation">.</span>roi_heads<span class="token punctuation">(</span>features<span class="token punctuation">,</span> proposals<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># 如果只提取Proposals（Proposal只是表示可能是需要检测的物体，</span>        <span class="token comment"># 具体是什么了类别还不清楚），而不对Proposals进行分类</span>        <span class="token comment"># RPN-only models don't have roi_heads</span>        x <span class="token operator">=</span> features        result <span class="token operator">=</span> proposals        detector_losses <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token comment"># 将loss值都放到一个字典里面保存</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>training<span class="token punctuation">:</span>        losses <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        losses<span class="token punctuation">.</span>update<span class="token punctuation">(</span>detector_losses<span class="token punctuation">)</span>        losses<span class="token punctuation">.</span>update<span class="token punctuation">(</span>proposal_losses<span class="token punctuation">)</span>        <span class="token keyword">return</span> losses     <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从forward()函数中可以得知：</p><p><strong>如果是训练过程，forward返回值就是loss值。</strong></p><p><strong>(如果不是训练过程，返回值就是检测的结果（bounding box、类别、mask）。</strong></p></blockquote><h3 id="二、后续"><a href="#二、后续" class="headerlink" title="二、后续"></a>二、后续</h3><blockquote><p>下面将主要介绍build_backbone（）、build_rpn（）和 build_roi_heads（）函数的相关内容：</p><p><a href="https://kingpopen.github.io/2021/07/27/maskrcnn-benchmark-master-san-build-backbone-han-shu/">maskrcnn-benckmark-master（三）：build_backbone()函数</a></p><p><a href="https://kingpopen.github.io/2021/07/27/maskrcnn-benchmark-master-si-build-rpn-han-shu/">maskrcnn-benchmark-master（四）：build_rpn()函数</a></p><p><a href="https://kingpopen.github.io/2021/07/27/maskrcnn-benchmark-master-wu-rpn-de-inference-wen-jian/">maskrcnn-benchmark-master（五）：RPN的inference文件</a></p><p>build_roi_heads（）函数相关内容还未完成，待续~</p><p>码字不易，未经许可，请勿随意转载!</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> MaskRCNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maskrcnn-benckmark-master （一）：配置文件</title>
      <link href="/2021/07/27/maskrcnn-benckmark-master-yi-pei-zhi-wen-jian/"/>
      <url>/2021/07/27/maskrcnn-benckmark-master-yi-pei-zhi-wen-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>​        作为本系列的开篇，我首先介绍的是配置文件部分，因为整个模型的搭建都和配置文件有很大的关系，所以我们先来了解一下配置文件里面都有啥相关参数配置。</p></blockquote><h3 id="一、配置文件"><a href="#一、配置文件" class="headerlink" title="一、配置文件"></a>一、配置文件</h3><blockquote><p>maskrcnn-benckmark-master是提供有默认的配置的，见文件:<strong>your_project/maskrcnn_benckmark/config/defaults.py</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 通过yacs包来生成的默认配置</span><span class="token keyword">from</span> yacs<span class="token punctuation">.</span>config <span class="token keyword">import</span> CfgNode <span class="token keyword">as</span> CN  _C <span class="token operator">=</span> CN<span class="token punctuation">(</span><span class="token punctuation">)</span> _C<span class="token punctuation">.</span>MODEL <span class="token operator">=</span> CN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 表示是否只有RPN</span>_C<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RPN_ONLY <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment"># 表示是否含有Mask分支</span>_C<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>MASK_ON <span class="token operator">=</span> <span class="token boolean">False</span>_C<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RETINANET_ON <span class="token operator">=</span> <span class="token boolean">False</span>_C<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>KEYPOINT_ON <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment"># 表示是否使用GPU</span>_C<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>DEVICE <span class="token operator">=</span> <span class="token string">"cuda"</span><span class="token comment"># 默认的网络框架</span>_C<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>META_ARCHITECTURE <span class="token operator">=</span> <span class="token string">"GeneralizedRCNN"</span>_C<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>CLS_AGNOSTIC_BBOX_REG <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>那如果我们需要修改相关配置，难道需要在这个defaults.py文件中进行修改吗？</p><p>NO! NO! NO!</p><p>我们其实只要把需要修改的配置写在一个带.yaml后缀的文件中，从而通过这个文件来修改默认的配置，见文件your_project/configs/e2e_mask_rcnn_R_50_FPN_1x.yaml</p><p>下面以e2e_mask_rcnn_R_50_FPN_1x.yaml文件为例 对模型的配置文件进行简单的介绍：</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 下面的这些变量（key就可以当做变量，value就是变量的值）都是在default.py都定义好的，</span><span class="token comment"># 下面出现的变量大部分都是需要进行更改的，不需要更改的直接使用默认的就行了，不需要在此处进行配置。</span><span class="token key atrule">MODEL</span><span class="token punctuation">:</span><span class="token comment"># 默认的RCNN网络框架 （代码中会有GeneralizedRCNN类，就是通过传入配置文件来生成模型的）  </span>  <span class="token key atrule">META_ARCHITECTURE</span><span class="token punctuation">:</span> <span class="token string">"GeneralizedRCNN"</span><span class="token comment"># 预训练的权重文件</span>  <span class="token key atrule">WEIGHT</span><span class="token punctuation">:</span> <span class="token string">"catalog://ImageNetPretrained/MSRA/R-50"</span> <span class="token comment"># 骨干网络（CNN特征提取器，官方实现了好几种，下面这种是ResNet-50+FPN）</span>  <span class="token key atrule">BACKBONE</span><span class="token punctuation">:</span>    <span class="token key atrule">CONV_BODY</span><span class="token punctuation">:</span> <span class="token string">"R-50-FPN"</span><span class="token comment"># ResNets作为特征提取网络的输出的特征维度</span>  <span class="token key atrule">RESNETS</span><span class="token punctuation">:</span>    <span class="token key atrule">BACKBONE_OUT_CHANNELS</span><span class="token punctuation">:</span> <span class="token number">256</span> <span class="token comment"># RPN的配置</span>  <span class="token key atrule">RPN</span><span class="token punctuation">:</span>    <span class="token comment"># 是否使用FPN（特征金字塔网络）</span>    <span class="token key atrule">USE_FPN</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>    <span class="token comment"># anchor的配置</span>    <span class="token key atrule">ANCHOR_STRIDE</span><span class="token punctuation">:</span> (4<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> 64)    <span class="token comment"># 用于训练过程的 筛选anchors的数目</span>    <span class="token key atrule">PRE_NMS_TOP_N_TRAIN</span><span class="token punctuation">:</span> <span class="token number">2000</span>    <span class="token comment"># 用于测试过程的 筛选anchors的数目</span>    <span class="token key atrule">PRE_NMS_TOP_N_TEST</span><span class="token punctuation">:</span> <span class="token number">1000</span>    <span class="token comment"># 用于测试过程 NMS操作之后留下的Proposals数目</span>    <span class="token key atrule">POST_NMS_TOP_N_TEST</span><span class="token punctuation">:</span> <span class="token number">1000</span>    <span class="token key atrule">FPN_POST_NMS_TOP_N_TEST</span><span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token comment"># ROI_HEADS配置</span>  <span class="token key atrule">ROI_HEADS</span><span class="token punctuation">:</span>    <span class="token comment"># 是否使用FPN</span>    <span class="token key atrule">USE_FPN</span><span class="token punctuation">:</span> <span class="token boolean important">True</span><span class="token comment"># class分类和bounding box回归分支</span>  <span class="token key atrule">ROI_BOX_HEAD</span><span class="token punctuation">:</span>    <span class="token comment"># ROI Align处理之后所生成的维度</span>    <span class="token key atrule">POOLER_RESOLUTION</span><span class="token punctuation">:</span> <span class="token number">7</span>    <span class="token comment"># 下面这几个参数还没搞明白 后续再补上~</span>    <span class="token key atrule">POOLER_SCALES</span><span class="token punctuation">:</span> (0.25<span class="token punctuation">,</span> <span class="token number">0.125</span><span class="token punctuation">,</span> <span class="token number">0.0625</span><span class="token punctuation">,</span> 0.03125)    <span class="token key atrule">POOLER_SAMPLING_RATIO</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token comment"># 特征提取器（对ROI Align之后的结果进行特征提取）</span>    <span class="token key atrule">FEATURE_EXTRACTOR</span><span class="token punctuation">:</span> <span class="token string">"FPN2MLPFeatureExtractor"</span>    <span class="token comment"># 预测器 （主要是使用全连接层进行 分类和回归）</span>    <span class="token key atrule">PREDICTOR</span><span class="token punctuation">:</span> <span class="token string">"FPNPredictor"</span>  <span class="token comment"># mask分割的分支</span>  <span class="token key atrule">ROI_MASK_HEAD</span><span class="token punctuation">:</span>    <span class="token comment"># 下面这几个参数还没搞明白 后续再补上~</span>    <span class="token key atrule">POOLER_SCALES</span><span class="token punctuation">:</span> (0.25<span class="token punctuation">,</span> <span class="token number">0.125</span><span class="token punctuation">,</span> <span class="token number">0.0625</span><span class="token punctuation">,</span> 0.03125)    <span class="token comment"># 特征提取器（对ROI Align之后的结果进行特征提取）</span>    <span class="token key atrule">FEATURE_EXTRACTOR</span><span class="token punctuation">:</span> <span class="token string">"MaskRCNNFPNFeatureExtractor"</span>    <span class="token comment"># 预测器 （主要是生成mask）</span>    <span class="token key atrule">PREDICTOR</span><span class="token punctuation">:</span> <span class="token string">"MaskRCNNC4Predictor"</span>    <span class="token comment"># 下面这几个参数还没搞明白 后续再补上~</span>    <span class="token key atrule">POOLER_RESOLUTION</span><span class="token punctuation">:</span> <span class="token number">14</span>    <span class="token key atrule">POOLER_SAMPLING_RATIO</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token key atrule">RESOLUTION</span><span class="token punctuation">:</span> <span class="token number">28</span>    <span class="token comment"># 是否使用ROI BOX HEAD特征提取器提取好的特征</span>    <span class="token key atrule">SHARE_BOX_FEATURE_EXTRACTOR</span><span class="token punctuation">:</span> <span class="token boolean important">False</span>  <span class="token key atrule">MASK_ON</span><span class="token punctuation">:</span> <span class="token boolean important">True</span> <span class="token comment"># 数据集的名称</span><span class="token key atrule">DATASETS</span><span class="token punctuation">:</span>  <span class="token key atrule">TRAIN</span><span class="token punctuation">:</span> ("coco_2014_train"<span class="token punctuation">,</span> "coco_2014_valminusminival")  <span class="token key atrule">TEST</span><span class="token punctuation">:</span> ("coco_2014_minival"<span class="token punctuation">,</span>) <span class="token comment"># 数据集的Dataloader配置（用来读取数据集）</span><span class="token key atrule">DATALOADER</span><span class="token punctuation">:</span>  <span class="token key atrule">SIZE_DIVISIBILITY</span><span class="token punctuation">:</span> <span class="token number">32</span> <span class="token comment"># 相关训练参数配置</span><span class="token key atrule">SOLVER</span><span class="token punctuation">:</span>  <span class="token key atrule">BASE_LR</span><span class="token punctuation">:</span> <span class="token number">0.02</span>  <span class="token key atrule">WEIGHT_DECAY</span><span class="token punctuation">:</span> <span class="token number">0.0001</span>  <span class="token key atrule">STEPS</span><span class="token punctuation">:</span> (60000<span class="token punctuation">,</span> 80000)  <span class="token key atrule">MAX_ITER</span><span class="token punctuation">:</span> <span class="token number">90000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>整体的GeneralizedRCNN 结构如下图所示（绘画水平有限orz），可以依照下图的模块去看相应的配置，需要配置的模块主要是：<strong>Backbone、RPN、ROI Heads(包括ROI Box head 和 ROI Mask head)</strong> 。</p></blockquote><p><img src="GeneralizedRCNN%E7%BB%93%E6%9E%84%E5%9B%BE.jpg" alt="图1 GeneralizedRCNN结构图"></p><h3 id="二、配置文件的使用"><a href="#二、配置文件的使用" class="headerlink" title="二、配置文件的使用"></a>二、配置文件的使用</h3><blockquote><p>​        配置文件主要是在your_project/tools/train_net.py中进行调用,首先看到train_net.py中的main函数:</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"PyTorch Object Detection Training"</span><span class="token punctuation">)</span>        <span class="token comment"># 配置文件(带有.yaml后缀的配置文件作为命令行参数输入)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>        <span class="token string">"--config-file"</span><span class="token punctuation">,</span>        default<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>        metavar<span class="token operator">=</span><span class="token string">"FILE"</span><span class="token punctuation">,</span>        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"path to config file"</span><span class="token punctuation">,</span>        <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 将配置文件进行读取</span>    cfg<span class="token punctuation">.</span>merge_from_file<span class="token punctuation">(</span>args<span class="token punctuation">.</span>config_file<span class="token punctuation">)</span>    cfg<span class="token punctuation">.</span>merge_from_list<span class="token punctuation">(</span>args<span class="token punctuation">.</span>opts<span class="token punctuation">)</span>    cfg<span class="token punctuation">.</span>freeze<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 将配置对象 cfg 作为参数传入train()函数</span>    model <span class="token operator">=</span> train<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> args<span class="token punctuation">.</span>local_rank<span class="token punctuation">,</span> args<span class="token punctuation">.</span>distributed<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>接着我们在train_net.py中找到train()函数:</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> local_rank<span class="token punctuation">,</span> distributed<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 根据配置文件来创建模型 (发现cfg被传到了build_detection_model()函数中)</span>    model <span class="token operator">=</span> build_detection_model<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span>    device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>DEVICE<span class="token punctuation">)</span>    model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​        cfg对象传入到了build_detection_model()函数中，这应该是一个利用配置来构建模型的函数，我们来看看这个函数里面都写了些啥：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>generalized_rcnn <span class="token keyword">import</span> GeneralizedRCNN <span class="token comment"># 一个字典</span>_DETECTION_META_ARCHITECTURES <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"GeneralizedRCNN"</span><span class="token punctuation">:</span> GeneralizedRCNN<span class="token punctuation">}</span>  <span class="token keyword">def</span> <span class="token function">build_detection_model</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 默认的cfg.MODEL.META_ARCHITECTURE都是GeneralizedRCNN</span>    meta_arch <span class="token operator">=</span> _DETECTION_META_ARCHITECTURES<span class="token punctuation">[</span>cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>META_ARCHITECTURE<span class="token punctuation">]</span>    <span class="token comment"># 相当于 return GeneralizedRCNN(cfg)</span>    <span class="token keyword">return</span> meta_arch<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其实可以看出build_detection_model()函数就是将cfg对象又作为参数，传到了GeneralizedRCNN类的init函数中，返回一个GeneralizedRCNN类对象，这个对象就是我们所定义的模型。</p><p>那么GeneraliziedRCNN类中究竟执行了哪些过程呢？它如何构建我们的Mask-RCNN模型的？</p><p>请阅读：<a href="https://kingpopen.github.io/2021/07/27/maskrcnn-benckmark-master-er-generalizedrcnn-lei/">maskrcnn-benchmark-master（二）：GeneraliziedRCNN类</a></p><p>码字不易，未经许可，请勿随意转载！</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> MaskRCNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maskrcnn-benckmark-master （零）：代码解读</title>
      <link href="/2021/07/27/maskrcnn-benckmark-master-ling-dai-ma-jie-du/"/>
      <url>/2021/07/27/maskrcnn-benckmark-master-ling-dai-ma-jie-du/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>之前一直都有使用Mask-RCNN模型，从一开始使用的MMDetection2框架中的Mask-RCNN，能够比较正常的运行，但是想要修改成我需要的形式时，发现MMDetection2中有一些地方都已经模块化好了，不方便修改，于是便转战到现在的maskrcnn-benckmark-master这个版本。</p><p>前段时间是有把maskrcnn-benckmark-master都阅读一遍，并按照了自己的需求修改了网络结构，但是现在又要修改其他部分，发现关于代码细节，我以及记不得太清楚了orz。想到好久都没有更新博客了，于是便决定记录一下第二次学习这个代码的过程，希望对同样想学习相关代码的朋友有所帮助，如果有理解有误的地方，还请评论区拍砖~</p></blockquote><h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><blockquote><p>因为本系列的文章是介绍maskrcnn-benchmark-master的网络构建的一些代码，方便根据这个项目将其修改成自己所需要的形式，所以在阅读本系列文章时，需要提前对Faster-RCNN、Mask-RCNN模型本身的一些细节有一个大致的了解，并默认读者已经能自行将maskrnn-benchmark-master相关环境配置好。</p></blockquote><p>推荐Faster-RCNN学习：<a href="https://zhuanlan.zhihu.com/p/31426458">https://zhuanlan.zhihu.com/p/31426458</a></p><p>推荐Mask-RCNN学习：<a href="https://zhuanlan.zhihu.com/p/37998710">https://zhuanlan.zhihu.com/p/37998710</a></p><blockquote><p>如下是我已经写好的文章（更新了再补充）：</p><p><a href="https://kingpopen.github.io/2021/07/27/maskrcnn-benckmark-master-yi-pei-zhi-wen-jian/">maskrcnn-benckmark-master（一）：配置文件</a></p><p><a href="https://kingpopen.github.io/2021/07/27/maskrcnn-benckmark-master-er-generalizedrcnn-lei/">maskrcnn-benckmark-master（二）：GeneralizedRCNN类</a></p><p><a href="https://kingpopen.github.io/2021/07/27/maskrcnn-benchmark-master-san-build-backbone-han-shu/">maskrcnn-benckmark-master（三）：build_backbone()函数</a></p><p><a href="https://kingpopen.github.io/2021/07/27/maskrcnn-benchmark-master-si-build-rpn-han-shu/">maskrcnn-benchmark-master（四）：build_rpn()函数</a></p><p><a href="https://kingpopen.github.io/2021/07/27/maskrcnn-benchmark-master-wu-rpn-de-inference-wen-jian/">maskrcnn-benchmark-master（五）：RPN的inference文件</a></p><p><a href="https://kingpopen.github.io/2021/08/01/maskrcnn-benchmark-master-liu-rpn-de-loss-wen-jian/">maskrcnn-benchmark-master（六）：RPN的loss文件</a></p><p><a href="https://kingpopen.github.io/2021/08/02/maskrcnn-benchmark-master-qi-build-roi-heads-han-shu/">maskrcnn-benchmark-master（七）：build_roi_heads()函数</a></p><p><a href="https://kingpopen.github.io/2021/08/02/maskrcnn-benchmark-master-ba-build-roi-box-head-han-shu/">maskrcnn-benchmark-master（八）：build_roi_box_head()函数</a></p><p><a href="https://kingpopen.github.io/2021/08/03/maskrcnn-benchmark-master-jiu-box-head-de-inference-wen-jian/">maskrcnn-benchmark-master（九）：box_head的inference文件</a></p><p><a href="https://kingpopen.github.io/2021/08/03/maskrcnn-benchmark-master-shi-box-head-de-loss-wen-jian/">maskrcnn-benchmark-master（十）：box_head的loss文件</a></p></blockquote><p>待续~</p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> MaskRCNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeError: Object of type ‘builtin_function_or_method‘ is not JSON serializable</title>
      <link href="/2021/02/18/typeerror-object-of-type-builtin-function-or-method-is-not-json-serializable/"/>
      <url>/2021/02/18/typeerror-object-of-type-builtin-function-or-method-is-not-json-serializable/</url>
      
        <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>使用python3在将字典保存为json的时候报错：TypeError: Object of type ‘builtin_function_or_method’ is not JSON <a href="https://so.csdn.net/so/search?q=serializable&amp;spm=1001.2101.3001.7020">serializable</a>.</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>save_dir<span class="token punctuation">,</span> save_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1.png" alt="图1 bug图"></p><h3 id="二、问题解决"><a href="#二、问题解决" class="headerlink" title="二、问题解决"></a>二、问题解决</h3><blockquote><p>因为在data字典类型数据中，使用了一个将numpy类型数据转为list类型数据的tolist()方法，而我的tolist()方法没有加括号orz，我加上括号后，问题就解决啦。</p></blockquote><p><img src="2.png" alt="图2 bug代码图"></p><blockquote><p>给tolist方法加上括号:</p></blockquote><p><img src="3.png" alt="图3 问题解决图"></p><blockquote><p>在百度上一直找不到相应的解决方法，最后在stackoverflow上看到了类似的问题，并给出了解决方法，我在此做一个记录，希望对遇到同样问题的朋友有些帮助！</p></blockquote><p>参考链接：<a href="https://stackoverflow.com/questions/59243262/typeerror-object-of-type-builtin-function-or-method-is-not-json-serializable">https://stackoverflow.com/questions/59243262/typeerror-object-of-type-builtin-function-or-method-is-not-json-serializable</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读：Automatic Car Damage Assessment System</title>
      <link href="/2021/02/13/lun-wen-yue-du-automatic-car-damage-assessment-system/"/>
      <url>/2021/02/13/lun-wen-yue-du-automatic-car-damage-assessment-system/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>《Automatic Car Damage Assessment System: Reading and Understanding Videos as Professional Insurance Inspectors》这篇论文是蚂蚁金服团队发表的，被AAAI 2020录用，同时定损宝这个应用也是蚂蚁金服团队开发的。这篇论文总共只有两页，没有介绍具体的算法细节。所以我就对其中重要的内容进行简单的翻译以及我自己的理解。<br>论文中提到的几个商业级的汽车定损项目网址：</p><p>tractable.ai/products/car-accidents</p><p>tonkabi.com/artifificial-intelligence</p><p><a href="http://www.altoros.com/car-damage-recognition">www.altoros.com/car-damage-recognition</a></p></blockquote><h3 id="一、自动损伤评估所面临的问题"><a href="#一、自动损伤评估所面临的问题" class="headerlink" title="一、自动损伤评估所面临的问题"></a>一、自动损伤评估所面临的问题</h3><blockquote><ol><li>高质量的视频很难获得，因为不可预测的用户行为导致离焦、任意拍摄角度和极端的汽车组件尺度等问题。 我们的系统通过前端交互模块获取视频，引导用户拍摄高质量和适当距离的视频。</li><li>汽车外观上的反射、泥浆和盖子可能被错误地识别为损伤。 通过从视频中提取多帧的模型融合，降低了噪声，并得到更好的结果。</li><li>汽车部件和损坏需要在像素级分割，以准确定位损坏。 分割的标签工作要比目标检测标签工作耗时得更多， 提出了一种利用大规模的bounding box标签进行训练（目标检测任务的标签）来提高损伤定位精度的弱监督分割模型。</li></ol></blockquote><p><img src="1.png" alt="图1 网络架构图"></p><h3 id="二、作者的方法"><a href="#二、作者的方法" class="headerlink" title="二、作者的方法"></a>二、作者的方法</h3><ul><li>数据获取</li></ul><blockquote><p>前后端交互子模块(Front End Interaction)旨在获得高质量的视频。 它使用移动推理引擎调用部署在移动设备上的深度学习模型来指导拍摄过程。 首先，视频中应该出现车牌和VIN码（它包含了汽车的制造商、发动机、底盘序列号等性能信息），并自动识别内容，以验证车主的身份以及以防欺诈。 其次，引导用户在更远的距离拍摄视频，然后更近地捕捉损坏细节。 距离由移动分类模型确定。 拍摄期间，视频等信息异步上传到云端进行进一步处理。</p><p>PS：这篇论文获取的是视频数据，而不是普通的图片数据。</p></blockquote><ul><li>损伤识别（不涉及零件）</li></ul><blockquote><p>汽车损伤识别可以被定义为多类别的检测或分割任务。这个过程需要大量的被标注的样本用来训练模型，但是对于分割任务来说这是不切实际的，因为分割数据集标注耗时基本是检测任务的5倍。 此外，在许多情况下，很难定义损伤纹理的边界。 我们采用two-stage的检测模型，并添加一个弱监督的语义分割分支，从Bounding box标签中获得更精确的像素级分类结果, 检测和分割分支的预测进一步融合。 此外，还分析了多帧而不是单一图像，以利用视频的时间一致性和内容互补性来过滤一些看起来像损伤图像从而来降低噪声。</p><p>PS：这个地方作者提到了损伤识别可以被定义为detection或者segmentation任务，但是由于segmentation任务相比detection任务的标签工作更加耗时，所以作者选择在一个two-stage的detection model（例如Faster-RCNN）基础上添加一个弱监督的语义分割分支（作者的意思应该是它们的标签是使用的bounding box标签，而不是mask标签，为了改善这个bounding box标签不够精准的问题，作者还是添加了一个弱监督的语义分割分支。个人感觉作者的模型和Mask-RCNN模型是基本类似的，但是我不太了解弱监督的语义分割，后续再调研一些），从而来提升效果。</p></blockquote><ul><li>损伤零件的定位</li></ul><blockquote><p>距离较远的帧更适合于汽车部件识别，而距离较近的帧更适合于损伤细节识别。因此，这两种帧都是通过帧选择算法自动从视频中提取的，而不是由用户拍摄多张照片。我们改进了Mask-RCNN来检测损坏部件，同时对部件进行准确的分割。多帧的结果被融合，以准确地定位损坏的组件。</p><p>PS：这个地方作者没有说如何将视频里的多个帧进行融合的orz</p></blockquote><ul><li>决策和维修计划的确定</li></ul><blockquote><p>给定损伤和零件的识别结果作为输入，决策模块学习和预测最终损坏的零件和零件损坏严重程度。识别和决策模块不被设计为端到端，因为在每个单一阶段，可以组合多个模型来提高精度，然后系统可以将算法结果转化为基于定价算法的修复方案。</p></blockquote><h3 id="三、系统的使用流程"><a href="#三、系统的使用流程" class="headerlink" title="三、系统的使用流程"></a>三、系统的使用流程</h3><blockquote><p>当发生车祸时，车主可以使用我们的系统评估损害赔偿。具体来说，用户遵循拍摄指导，应该扫描车牌，然后VIN代码，以验证汽车身份的一致性及其损坏。 然后，用户将在更远和更近的距离拍摄损坏部件的视频。在捕获过程中，视频被上传到云中以识别损坏。最后将损坏的结果返回给用户。损坏的结果也附有估计价格，用户可以决定亲自索赔或修理。</p></blockquote><h3 id="四、个人总结"><a href="#四、个人总结" class="headerlink" title="四、个人总结"></a>四、个人总结</h3><blockquote><p>这篇论文总共只有两页，具体涉及的算法细节不多，并且蚂蚁金服团队使用的是视频数据而不是普通的图片数据。比较关键的问题是如何将视频中近景数据信息和远景的数据信息进行融合，论文中也没有具体说明，本篇博客就是简单的记录一下，希望对有需要的朋友有所帮助。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 论文阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你：Windows系统上安装GPU深度学习环境</title>
      <link href="/2020/07/07/shou-ba-shou-jiao-ni-windows-xi-tong-shang-an-zhuang-gpu-shen-du-xue-xi-huan-jing/"/>
      <url>/2020/07/07/shou-ba-shou-jiao-ni-windows-xi-tong-shang-an-zhuang-gpu-shen-du-xue-xi-huan-jing/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>在入手学习深度学习的过程当中，有好几个朋友都咨询过我如何安装深度学习环境，之前写过一篇在Ubuntu环境下安装深度学习环境，但是有部分朋友在Windows电脑上安装深度学习环境遇到过许多的问题，所以我就再写一篇Windows系统上安装GPU深度学习环境的教程，希望对刚刚入手深度学习的朋友有所帮助:)</p><p>PS:不需要自己手动安装CUDA和cuDNN（安装这两样东西属实要劝退不少朋友），网上许多的博客都是说要安装CUDA和cuDNN，但是选择Tensorflow-GPU版本或者PyTorch-GPU版本中都会自带已经简化了的CUDA和cuDNN的包，所以不再需要我们自己去手动安装了！！！ </p></blockquote><h3 id="一、Conda环境搭建"><a href="#一、Conda环境搭建" class="headerlink" title="一、Conda环境搭建"></a>一、Conda环境搭建</h3><blockquote><p>Anaconda可以帮助我们很好的管理python环境（大家应该都是用python来玩深度学习的吧囧rz），例如我电脑中想要有python2.7和python3.6两个版本的python编译器，那么就可以用Anaconda创建两个python版本的虚拟环境，这两个虚拟环境中都可以安装各自的包，互相不影响。</p></blockquote><h4 id="1、Anaconda的下载"><a href="#1、Anaconda的下载" class="headerlink" title="1、Anaconda的下载"></a>1、Anaconda的下载</h4><blockquote><p>人生苦短，我选择在在<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">清华园镜像</a>中下载Anaconda，因为我的电脑是Window10 64位，所以我选择的版本是Windows-x86_64后缀的，至于版本号，可以自己选择，我选的是Anaconda3-5.1.0。</p><p><img src="1.png" alt="图1 镜像源图"></p></blockquote><h4 id="2、Anaconda的安装"><a href="#2、Anaconda的安装" class="headerlink" title="2、Anaconda的安装"></a>2、Anaconda的安装</h4><blockquote><p>下载速度还是蛮快的，下载成功之后就是安装过程，前面几个都是一路next，到Advanced Options部分，我选的是<strong>Add Anaconda to my PATH environment variable</strong>（将Anaconda安装路径加入环境变量，省得自己再去加环境变量）。</p></blockquote><p><img src="2.png" alt="图2 Anaconda安装图1"></p><blockquote><p>接下来就是安装过程可能要花一些时间，如果在<strong>安装途中出现了cmd的黑窗口，千万不要自己手抖把它给关了</strong>，cmd的黑窗口可能是在下载一些东西，我就是之前手抖把黑窗口关了，就出现了一些安装失败的问题，详情可以看我的另一篇博客。如果自己安装结束之后应该包含有下图的几个内容。</p></blockquote><p><img src="3.png" alt="图3 Anaconda安装图2"></p><blockquote><p>在Anaconda Prompt输入conda list成功显示出结果时，说明Anaconda安装成功啦!</p></blockquote><p><img src="4.png" alt="图4 Anaconda安装图3"></p><h4 id="3、conda创建python虚拟环境"><a href="#3、conda创建python虚拟环境" class="headerlink" title="3、conda创建python虚拟环境"></a>3、conda创建python虚拟环境</h4><blockquote><p>为了使自己的python深度学习环境不和其他python相冲突，我们需要使用Conda创建一个python的虚拟环境。我创建的是一个叫做DPlearning_3.6的python3.6版本环境。在虚拟环境安装成功之后，使用activate DPlearning_3.6命令切换到这个虚拟环境中。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">创建python3<span class="token punctuation">.</span><span class="token number">6</span>的虚拟环境 名字叫做DPlearning_3<span class="token punctuation">.</span><span class="token number">6</span>conda create <span class="token operator">-</span>n DPlearning_3<span class="token punctuation">.</span><span class="token number">6</span> python<span class="token operator">=</span><span class="token number">3.6</span> <span class="token comment">#切换到DPlearning_3.6虚拟环境</span>activate DPlearning_3<span class="token punctuation">.</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="5.png" alt="图5 conda虚拟环境"></p><blockquote><p>可以从上图中看到下载包的网速还是比较慢的，所以我们选择添加清华源的镜像。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">conda config <span class="token operator">-</span><span class="token operator">-</span>add channels https<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>anaconda<span class="token operator">/</span>pkgs<span class="token operator">/</span>free<span class="token operator">/</span>conda config <span class="token operator">-</span><span class="token operator">-</span>add channels https<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>anaconda<span class="token operator">/</span>pkgs<span class="token operator">/</span>main<span class="token operator">/</span>conda config <span class="token operator">-</span><span class="token operator">-</span><span class="token builtin">set</span> show_channel_urls yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="三、GPU环境搭建"><a href="#三、GPU环境搭建" class="headerlink" title="三、GPU环境搭建"></a>三、GPU环境搭建</h3><h4 id="1、了解自己电脑显卡驱动版本"><a href="#1、了解自己电脑显卡驱动版本" class="headerlink" title="1、了解自己电脑显卡驱动版本"></a>1、了解自己电脑显卡驱动版本</h4><blockquote><p>人最重要的是要了解自己。</p><p>​                                                 ——我说的</p><p>因为有部分小伙伴对自己电脑显卡驱动的版本不了解，所以选择Tensorflow或者PyTorch的版本的时候会出现安装了，但不兼容的问题，所以我们首先要了解自己电脑显卡驱动版本:)</p></blockquote><ul><li><p>1.1 首先在Windows设置中搜索控制面板(按Win键，然后点击左下方的设置按钮就可以到Windows设置页面)。</p><p><img src="6.png" alt="图6 控制面板1图"></p></li><li><p>1.2  在控制面板中点击NVIDIA控制面板。</p><p><img src="7.png" alt="图7 控制面板2图"></p></li><li><p>1.3  NVIDIA控制面板中点击“帮助”下面的“系统信息”。</p><p><img src="8.jpg" alt="图8 控制面板3图"></p></li><li><p>1.4  查看驱动程序版本，我的显卡驱动版本是388.57。</p><p><img src="9.png" alt="图9 控制面板4图"></p></li><li><p>1.5  根据显卡驱动版本确定自己能使用的CUDA Tookit版本。我的显卡驱动版本是388.57,介于385.54和391.29之间，由下图可知，我所能选用的CUDA Tookit版本只有CUDA 9.0。</p><p><img src="10.png" alt="图10 CUDA版本介绍"></p></li></ul><h4 id="2、安装正确的TensorFlow-GPU版本"><a href="#2、安装正确的TensorFlow-GPU版本" class="headerlink" title="2、安装正确的TensorFlow-GPU版本"></a>2、安装正确的TensorFlow-GPU版本</h4><blockquote><p>我已经知道我的电脑只能用CUDA 9.0版本的包，现在要选择正确的深度学习框架版本，现在主流的深度学习框架是TensorFlow和PyTorch，我们首先看到TensorFlow框架(不安装Tensorflow框架的可以直接去看安装PyTorch框架的部分)。</p><p>由下面的TensorFlow版本和CUDA版本对应图可以看出，适用于CUDA版本为9的TensorFlow-gpu版本为1.5-1.12之间，我选择1.8进行安装。</p><p>PS：同时可以看到Python版本的对应关系，CUDA 9支持的python最高版本是python3.6，只有CUDA 10及以上才支持python3.7，所以创建的python虚拟环境最好为pyhon3.6版本的。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#(首先要确保自己在之前创建的DPlearning_3.6环境下)</span>activate DPlearning_3<span class="token punctuation">.</span><span class="token number">6</span> <span class="token comment">#安装Tensorflow-gpu 1.8.0版本</span>conda install tensorflow<span class="token operator">-</span>gpu<span class="token operator">=</span><span class="token number">1.8</span><span class="token number">.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以看到TensorFlow的安装包是包含有cudatoolkit和cudnn的，所以不需要我们自己再去安装CUDA和cuDNN（突然比心.jpg）,因为加了清华源镜像，所以下载速度还是蛮快的。</p><p>PS：注意看下图的部分包的名字里面带有py36的字样，如果你的python环境是3.7，使用这种包可能会出现问题。（之前有师弟就是用的pyhon3.7版本，TensorFlow版本也是选的支持python3.7的版本，但总是安装不成功，换成python3.6版本就成功了）</p></blockquote><p><img src="11.png" alt="图11 TensorFlow安装图"></p><blockquote><p>TensorFlow下载安装结束之后，使用import tensorflow as tf命令来看是否成功安装（现实总是很骨感，报错了orz），可以看到报错的内容主要是关于numpy，但我相信“方法总比困难多”，通过网上查找解决方法，了解到是因为numpy版本太高了，我重新安装numpy=1.16.0版本的就解决了。（不同的Tensorflow版本可能对应的numpy版本不同，小伙伴们可以多试几个numpy版本）。</p></blockquote><p><img src="12.png" alt="图12 TensorFlow安装bug图"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#以下操作都是在DPlearning_3.6的虚拟环境下进行的</span><span class="token comment">#安装numpy1.16.0的包</span>conda install numpy<span class="token operator">=</span><span class="token number">1.16</span><span class="token number">.0</span> <span class="token comment">#查看tensorflow是否安装成功</span>python<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfboy<span class="token keyword">print</span><span class="token punctuation">(</span>tfboy<span class="token punctuation">.</span>test<span class="token punctuation">.</span>is_gpu_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#显示True说明安装成功了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="13.png" alt="图12 TensorFlow安装成功图"></p><blockquote><p><strong>至此你已经成功成为一名tfboy or tfgirl？？？ Congratulations！！！</strong></p></blockquote><h4 id="3、安装正确的PyTorch-GPU版本"><a href="#3、安装正确的PyTorch-GPU版本" class="headerlink" title="3、安装正确的PyTorch-GPU版本"></a>3、安装正确的PyTorch-GPU版本</h4><blockquote><p>接着PyTorch版本的安装（如果自己喜欢使用TensorFlow框架，就没必要安装PyTorch框架了）,到<a href="https://pytorch.org/">PyTorch的官网</a>可以很方便的找到自己需要的PyTorch版本，我用的是CUDA 9.0版本。</p><p>PS:私以为PyTorch安装要比TensorFlow简单些？？？</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#cudatoolkit=9.0表示用的是cuda 9.0的包（不像tensorflow还需要对应各种版本，直接在官网找到cuda 9.0对应的安装代码就行了）</span>conda install pytorch<span class="token operator">==</span><span class="token number">1.1</span><span class="token number">.0</span> torchvision<span class="token operator">==</span><span class="token number">0.3</span><span class="token number">.0</span> cudatoolkit<span class="token operator">=</span><span class="token number">9.0</span> <span class="token operator">-</span>c pytorch  <span class="token comment">#安装成功后进入python环境中验证一下</span>python<span class="token keyword">import</span> torch<span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#结果为True就说明成功了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="14.png" alt="图14 pytorch安装成功图"></p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><blockquote><p>我感觉总的流程还是算比较简单的，Anaconda负责包的管理，CUDA负责GPU的加速处理，但TensorFlow和PyTorch的安装包里面都是自带了简化的CUDA toolkit，所以只需要根据自己电脑的显卡驱动版本，确定自己电脑能使用的Tensoflow或者PyTorch包进行安装就行了，不需要自己手动安装CUDA和cuDNN！</p><p>因为生活中经常有小伙伴问我这些问题，加上之前在安装深度学习GPU环境上也踩过很多的坑，所以我就记录成一篇博客希望对有同样需求的小伙伴有所帮助，欢迎评论区拍砖！！！，如果对Ubuntu上安装深度学习环境感兴趣可以参考我另一篇博客。</p><p>码字不易，如果对你有所帮助，麻烦点个赞再走吧:)</p><p>未经许可，请勿随意转载！</p></blockquote><p>参考：</p><p><a href="https://www.jianshu.com/p/d3b9419a0f89">https://www.jianshu.com/p/d3b9419a0f89</a></p><p><a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html">https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html</a></p><p><a href="https://www.tensorflow.org/install/source#common_installation_problems">https://www.tensorflow.org/install/source#common_installation_problems</a></p><p><a href="https://www.cnblogs.com/tianlang25/p/12433025.html">https://www.cnblogs.com/tianlang25/p/12433025.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端Ajax传送数据，Spring boot搭的后台能接受，但数据不能成功返回前端</title>
      <link href="/2020/06/28/qian-duan-ajax-chuan-song-shu-ju-spring-boot-da-de-hou-tai-neng-jie-shou-dan-shu-ju-bu-neng-cheng-gong-fan-hui-qian-duan/"/>
      <url>/2020/06/28/qian-duan-ajax-chuan-song-shu-ju-spring-boot-da-de-hou-tai-neng-jie-shou-dan-shu-ju-bu-neng-cheng-gong-fan-hui-qian-duan/</url>
      
        <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>我使用的是<a href="https://so.csdn.net/so/search?q=Ajax&amp;spm=1001.2101.3001.7020">Ajax</a>前端传数据给用Spring boot框架搭的后台，后台可以接受到数据，但是返回到前端时不能进入Ajax的success的函数里面，而是执行的error函数里的内容。</p></blockquote><p>前端Ajax代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//点击事件，当前端的标签被点击时进行ajax与后端交互</span><span class="token keyword">function</span> <span class="token function">navbarClick</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">"post"</span><span class="token punctuation">,</span>        <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">"http://localhost:8080/operator"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">"哈哈哈哈哈哈"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">//交互的返回数据类型为json</span>        <span class="token literal-property property">dataType</span><span class="token operator">:</span><span class="token string">"json"</span><span class="token punctuation">,</span>        <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">error</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"出错啦orz!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//如果后端成功返回数据，那么前端成功接收之后应该执行alert()弹框显示返回的内容。</span><span class="token comment">//如果前端未能成功接收，那么前端应该alert()弹窗显示"出错啦orz!!!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后端的controller中的部分代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/operator"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Operator</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> type<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经到了后台,接收的数据为:"</span><span class="token operator">+</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"皮皮虾，我们走!!!"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//后端成功接受数据，将会在后台打印"已经到了后台,接收的数据为:"哈哈哈哈哈"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当我前端执行点击事件后，后台能够成功接收前端数据，前端显示得到的结果弹窗显示是”出错啦orz!!!”</p></blockquote><p><img src="1.png" alt="图1 后台输出图"></p><p><img src="2.png" alt="图2 前台bug显示图"></p><blockquote><p>WTF???  我后台Controller部分加上了@ResponseBody注解，我看好多博客说Spring boot<a href="https://so.csdn.net/so/search?q=%E6%A1%86%E6%9E%B6&amp;spm=1001.2101.3001.7020">框架</a>中加了@ResponseBody注解之后会将函数返回的内容转化为json格式，而且我前端Ajax中设置的dataType接受类型也是”json”。</p></blockquote><h3 id="二、解决方法"><a href="#二、解决方法" class="headerlink" title="二、解决方法"></a>二、解决方法</h3><blockquote><p>最后我的解决方法是，将前端Ajax代码中的dataType类型设置为”html”或者”text”,前端就能够成功接收了囧rz。</p></blockquote><p><img src="3.png" alt="图3 后台修改图"></p><p><img src="4.png" alt="图4 前台成功显示图"></p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><blockquote><p>前端不能成功接收数据应该是因为我后端返回的数据类型（函数的返回值类型是String）和前端接收的数据类型(dataType设置的为json)不一致吧，但是网上很多博客说后端加上@ResponseBody注解是能自动将返回类型转化为json类型，那我前端设置的dataType为json应该也是没有问题的吧囧rz。</p><p>总之就是迷惑行为，如果你的后端返回值类型为String，前端Ajax部分将dataType改成了html或者text还是不行，可以尝试将IDE重启，或者将电脑重启，再试一下，反正我用的IDEA经常修改了html页面，重启服务之后页面显示的内容还是没有修改之前的，得重启程序才行，玄学救我！！！</p><p>PS：补充，后面发现清除浏览器缓存之后，就不存在重启后端服务后之前更改的html页面不生效的问题了，Chrome的清除缓存快捷键是ctrl+shift+delete。</p><p>因为我也是刚刚接触Spring boot这一块，自己也不是很清楚一些细节，所以将这个问题记录下来，希望对有同样问题的人有所帮助！</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
