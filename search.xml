<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo 图片加载不能正常显示</title>
      <link href="/2022/05/27/hexo-tu-pian-jia-zai-bu-neng-zheng-chang-xian-shi/"/>
      <url>/2022/05/27/hexo-tu-pian-jia-zai-bu-neng-zheng-chang-xian-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>最近在使用hexo 加 matery主题来搭建自己的博客，记录一下出现的问题。</p><p>hexo的matery主题链接：<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p><p>里面有相应的中文使用教程，还是比较详细的。</p><p>我的hexo版本是6.0.0</p></blockquote><h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><blockquote><p>我在用Typora写相关博客的md文件时，需要插入相关的图片，我按照网上的方法都是：</p><ul><li>在根目录下的_config.yaml文件中将”post_asset_folder”设为:true</li><li>npm安装转化图片路径的工具包：npm install hexo-asset-image –save</li><li>Typora中使用！[]（）传入对应的图片文件名</li></ul></blockquote><p>我按照上述步骤尝试之后发现图片还是不能够正常的显示出来，我的Typora是按照规范写的图片名，但是博客就是不能展示图片:</p><img src="2.png" alt="图1 Typora代码图" style="zoom:50%;"><img src="1.png" alt="图2 bug图" style="zoom:67%;"><h3 id="二、问题原因"><a href="#二、问题原因" class="headerlink" title="二、问题原因"></a>二、问题原因</h3><ul><li><p>按F12查看当前网页的 img 标签的里面的url是什么？</p><blockquote><p>我发现url解析成了：/kingpopen.github.io/2022/05/27/new-blog/pic.jpg</p><p><strong>难怪</strong>不能正常的展示图片~</p><p>说明hexo-asset-image这个工具包在帮助我解析typora中写的图片路径的时候出了问题。</p></blockquote><img src="3.png" alt="图3 F12的img标签图" style="zoom:100%;"></li><li><p>查看hexo-assert-image中到底写了些什么？</p><blockquote><p>hexo-assert-image就放在:根目录\node_modules\hexo-asset-image 里面</p><p>打开其中的index.js文件，发现写了一堆代码，比较关键的代码是：</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>可以发现最后的img的src路径是由confg.root, link, src, 这三部分组成，我将这三部分打印输出，得到的结果是：</p></blockquote><img src="4.png" alt="图4 打印输出图" style="zoom:50%;"><blockquote><p>原来就是这几样东西组成我最后的src~</p><p>看来问题就是出在了hexo-asset-image包的index.js文件里面，它解析方式有一些问题。</p></blockquote></li><li><p>最后查了一些博客，发现大家安装的hexo-asset-img版本主要是下面这两个：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 高版本的hexo 不要安装下面这两类包</span><span class="token number">1.</span> npm install https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>CodeFalling<span class="token operator">/</span>hexo<span class="token operator">-</span>asset<span class="token operator">-</span>image <span class="token operator">--</span>save<span class="token number">2.</span> npm install https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>7ym0n<span class="token operator">/</span>hexo<span class="token operator">-</span>asset<span class="token operator">-</span>image <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>我看到这两个版本的发行时间都是比较早，大概2018年左右。现在我使用的hexo版本是6.0.0的，估计是因为hexo的版本更新了，但是hexo-asset-image的版本没有进行维护，导致了错误的出现。</p></blockquote></li></ul><h3 id="三、解决方法"><a href="#三、解决方法" class="headerlink" title="三、解决方法"></a>三、解决方法</h3><blockquote><p>最后找到一篇博客，这个老哥自己改进了hexo-asset-img，并且开源了，我安装他自己改的hexo-asset-img版本，就解决了这个问题。</p></blockquote><p>​ <strong>注意一下之前的包叫：hexo-asset-image, 这个老哥的包叫:hexo-asset-img</strong></p><blockquote><p>博客：<a href="https://cloud.tencent.com/developer/article/1970544">https://cloud.tencent.com/developer/article/1970544</a></p><p>github：<a href="https://github.com/yiyungent/hexo-asset-img">https://github.com/yiyungent/hexo-asset-img</a></p></blockquote><ul><li>方法1：重新安装正确的hexo-asset-img版本（推荐）</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 先卸载之前的hexo-asset-image 版本</span>npm uninstall hexo<span class="token operator">-</span>asset<span class="token operator">-</span>image<span class="token comment">// 再选择正确的版本安装</span>npm install hexo<span class="token operator">-</span>asset<span class="token operator">-</span>img<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>方法二：直接修改hexo-asset-image中的index.js文件</p><blockquote><p>因为有的时候github的网速比较慢，npm install安装可能安装不成功，就直接将：<a href="https://github.com/yiyungent/hexo-asset-img">https://github.com/yiyungent/hexo-asset-img</a> 中的index.js文件的内容拷贝，然后替换自己项目中hexo-asset-image中的index.js的内容就好了。</p></blockquote></li></ul><p>至此，该问题就成功解决了，效果如下所示：</p><img src="5.png" alt="图5 效果图" style="zoom:;"><p><strong>注：如果存放图片的文件夹名称是中文，Typora中的！[]（）中图片图片路径就不要加文件夹名了，直接使用图片名称，不然还是会出现不能显示的问题！</strong></p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><blockquote><p>​        这是我自己第一次使用github来搭建博客，其中也遇到了一些问题，就属这个问题花的时间比较长，好在最后成功解决了。如果有其他朋友遇到这类问题，希望对你们有所帮助! 😄</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maskrcnn-benckmark-master （二）：GeneralizedRCNN类</title>
      <link href="/2022/05/27/maskrcnn-benckmark-master-er-generalizedrcnn-lei/"/>
      <url>/2022/05/27/maskrcnn-benckmark-master-er-generalizedrcnn-lei/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>​       上次介绍到了配置文件如何使用，以及配置文件cfg对象最后传到了一个GeneralizedRCNN类中。本篇，我们介绍一下GeneralizedRCNN类究竟是怎么构建出一个模型的。GeneralizedRCNN结构简图如下所示：</p></blockquote><img src="./maskrcnn-benckmark-master-（二）：GeneralizedRCNN类/GeneralizedRCNN结构图.jpg" style="zoom:50%;"><h3 id="一、GeneralizedRCNN类"><a href="#一、GeneralizedRCNN类" class="headerlink" title="一、GeneralizedRCNN类"></a>一、GeneralizedRCNN类</h3><blockquote><p>GeneralizedRCNN类在<strong>your_project/maskrcnn_benchmark/modeling/detector/generalized_rcnn.py</strong>文件中，我们首先看构造函数**<em>init</em>()**:</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>GeneralizedRCNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token triple-quoted-string string">'''        build_backbone()  build_rpn()  build_roi_heads()重点需要了解的函数        build_backbone()主要是创建ResNet+FPN等特征提取网络        build_rpn()主要是创建RPN结构        build_roi_heads()主要是创建ROI box head  ROI mask head等结构                '''</span>         <span class="token comment"># 创建骨干网络</span>        self<span class="token punctuation">.</span>backbone <span class="token operator">=</span> build_backbone<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span>        <span class="token comment"># 创建rpn</span>        self<span class="token punctuation">.</span>rpn <span class="token operator">=</span> build_rpn<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> self<span class="token punctuation">.</span>backbone<span class="token punctuation">.</span>out_channels<span class="token punctuation">)</span>        <span class="token comment"># 创建roi_heads</span>        self<span class="token punctuation">.</span>roi_heads <span class="token operator">=</span> build_roi_heads<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> self<span class="token punctuation">.</span>backbone<span class="token punctuation">.</span>out_channels<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从构造函数可以看出，整个网络主要由3个部分组成：backbone、rpn、roi_heads。（以类变量的形式存在）</p><p>而这三个部分主要是由build_backbone（）、build_rpn（）、build_roi_heads（）三个函数所生成，我后面会依次介绍这三个函数。</p><p>接着，我们看一下GeneralizedRCNN类的forward()函数，观察上面上面三个类变量是如何进行工作的:</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> images<span class="token punctuation">,</span> targets<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Arguments:        images (list[Tensor] or ImageList): images to be processed        targets (list[BoxList]): ground-truth boxes present in the image (optional)    Returns:        result (list[BoxList] or dict[Tensor]): the output from the model.            During training, it returns a dict[Tensor] which contains the losses.            训练阶段返回loss值            During testing, it returns list[BoxList] contains additional fields            like `scores`, `labels` and `mask` (for Mask R-CNN models).            测试阶段返回预测的结果（得分， 标签， mask）    """</span>     <span class="token comment"># 训练过程，输入的数据必须有对应的标签，不然没法计算损失</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>training <span class="token keyword">and</span> targets <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"In training mode, targets should be passed"</span><span class="token punctuation">)</span>    images <span class="token operator">=</span> to_image_list<span class="token punctuation">(</span>images<span class="token punctuation">)</span>    <span class="token comment"># 图像经过backbone之后  输出提取的图像特征</span>    features <span class="token operator">=</span> self<span class="token punctuation">.</span>backbone<span class="token punctuation">(</span>images<span class="token punctuation">.</span>tensors<span class="token punctuation">)</span>    <span class="token comment"># 特征经过RPN网络得到proposals和相应的loss值（因此RPN的作用就是获取Proposals和训练时RPN的loss）</span>    <span class="token comment"># self.rpn返回值的proposals中是cat_Boxlist得到的结果list(BoxList) shape is （batch size，）</span>    proposals<span class="token punctuation">,</span> proposal_losses <span class="token operator">=</span> self<span class="token punctuation">.</span>rpn<span class="token punctuation">(</span>images<span class="token punctuation">,</span> features<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>roi_heads<span class="token punctuation">:</span>        <span class="token comment"># result是检测的结果，detection_losses的损失（如果存在mask分支，result和detection_loss都是包含有mask的检测结果和mask的损失的）</span>        x<span class="token punctuation">,</span> result<span class="token punctuation">,</span> detector_losses <span class="token operator">=</span> self<span class="token punctuation">.</span>roi_heads<span class="token punctuation">(</span>features<span class="token punctuation">,</span> proposals<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># 如果只提取Proposals（Proposal只是表示可能是需要检测的物体，</span>        <span class="token comment"># 具体是什么了类别还不清楚），而不对Proposals进行分类</span>        <span class="token comment"># RPN-only models don't have roi_heads</span>        x <span class="token operator">=</span> features        result <span class="token operator">=</span> proposals        detector_losses <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token comment"># 将loss值都放到一个字典里面保存</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>training<span class="token punctuation">:</span>        losses <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        losses<span class="token punctuation">.</span>update<span class="token punctuation">(</span>detector_losses<span class="token punctuation">)</span>        losses<span class="token punctuation">.</span>update<span class="token punctuation">(</span>proposal_losses<span class="token punctuation">)</span>        <span class="token keyword">return</span> losses     <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从forward()函数中可以得知：</p><p><strong>如果是训练过程，forward返回值就是loss值。</strong></p><p><strong>(如果不是训练过程，返回值就是检测的结果（bounding box、类别、mask）。</strong></p></blockquote><h3 id="二、后续"><a href="#二、后续" class="headerlink" title="二、后续"></a>二、后续</h3><blockquote><p>下面将主要介绍build_backbone（）、build_rpn（）和 build_roi_heads（）函数的相关内容：</p><p>maskrcnn-benckmark-master（三）：build_backbone()函数</p><p>maskrcnn-benchmark-master（四）：build_rpn()函数</p><p>maskrcnn-benchmark-master（五）：RPN的inference文件</p><p>build_roi_heads（）函数相关内容还未完成，待续~</p><p>码字不易，未经许可，请勿随意转载!</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> MaskRCNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maskrcnn-benckmark-master （一）：配置文件</title>
      <link href="/2022/05/27/maskrcnn-benckmark-master-yi-pei-zhi-wen-jian/"/>
      <url>/2022/05/27/maskrcnn-benckmark-master-yi-pei-zhi-wen-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>​        作为本系列的开篇，我首先介绍的是配置文件部分，因为整个模型的搭建都和配置文件有很大的关系，所以我们先来了解一下配置文件里面都有啥相关参数配置。</p></blockquote><h3 id="一、配置文件"><a href="#一、配置文件" class="headerlink" title="一、配置文件"></a>一、配置文件</h3><blockquote><p>maskrcnn-benckmark-master是提供有默认的配置的，见文件:<strong>your_project/maskrcnn_benckmark/config/defaults.py</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 通过yacs包来生成的默认配置</span><span class="token keyword">from</span> yacs<span class="token punctuation">.</span>config <span class="token keyword">import</span> CfgNode <span class="token keyword">as</span> CN  _C <span class="token operator">=</span> CN<span class="token punctuation">(</span><span class="token punctuation">)</span> _C<span class="token punctuation">.</span>MODEL <span class="token operator">=</span> CN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 表示是否只有RPN</span>_C<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RPN_ONLY <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment"># 表示是否含有Mask分支</span>_C<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>MASK_ON <span class="token operator">=</span> <span class="token boolean">False</span>_C<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>RETINANET_ON <span class="token operator">=</span> <span class="token boolean">False</span>_C<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>KEYPOINT_ON <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment"># 表示是否使用GPU</span>_C<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>DEVICE <span class="token operator">=</span> <span class="token string">"cuda"</span><span class="token comment"># 默认的网络框架</span>_C<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>META_ARCHITECTURE <span class="token operator">=</span> <span class="token string">"GeneralizedRCNN"</span>_C<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>CLS_AGNOSTIC_BBOX_REG <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>那如果我们需要修改相关配置，难道需要在这个defaults.py文件中进行修改吗？</p><p>NO! NO! NO!</p><p>我们其实只要把需要修改的配置写在一个带.yaml后缀的文件中，从而通过这个文件来修改默认的配置，见文件your_project/configs/e2e_mask_rcnn_R_50_FPN_1x.yaml</p><p>下面以e2e_mask_rcnn_R_50_FPN_1x.yaml文件为例 对模型的配置文件进行简单的介绍：</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 下面的这些变量（key就可以当做变量，value就是变量的值）都是在default.py都定义好的，</span><span class="token comment"># 下面出现的变量大部分都是需要进行更改的，不需要更改的直接使用默认的就行了，不需要在此处进行配置。</span><span class="token key atrule">MODEL</span><span class="token punctuation">:</span><span class="token comment"># 默认的RCNN网络框架 （代码中会有GeneralizedRCNN类，就是通过传入配置文件来生成模型的）  </span>  <span class="token key atrule">META_ARCHITECTURE</span><span class="token punctuation">:</span> <span class="token string">"GeneralizedRCNN"</span><span class="token comment"># 预训练的权重文件</span>  <span class="token key atrule">WEIGHT</span><span class="token punctuation">:</span> <span class="token string">"catalog://ImageNetPretrained/MSRA/R-50"</span> <span class="token comment"># 骨干网络（CNN特征提取器，官方实现了好几种，下面这种是ResNet-50+FPN）</span>  <span class="token key atrule">BACKBONE</span><span class="token punctuation">:</span>    <span class="token key atrule">CONV_BODY</span><span class="token punctuation">:</span> <span class="token string">"R-50-FPN"</span><span class="token comment"># ResNets作为特征提取网络的输出的特征维度</span>  <span class="token key atrule">RESNETS</span><span class="token punctuation">:</span>    <span class="token key atrule">BACKBONE_OUT_CHANNELS</span><span class="token punctuation">:</span> <span class="token number">256</span> <span class="token comment"># RPN的配置</span>  <span class="token key atrule">RPN</span><span class="token punctuation">:</span>    <span class="token comment"># 是否使用FPN（特征金字塔网络）</span>    <span class="token key atrule">USE_FPN</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>    <span class="token comment"># anchor的配置</span>    <span class="token key atrule">ANCHOR_STRIDE</span><span class="token punctuation">:</span> (4<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> 64)    <span class="token comment"># 用于训练过程的 筛选anchors的数目</span>    <span class="token key atrule">PRE_NMS_TOP_N_TRAIN</span><span class="token punctuation">:</span> <span class="token number">2000</span>    <span class="token comment"># 用于测试过程的 筛选anchors的数目</span>    <span class="token key atrule">PRE_NMS_TOP_N_TEST</span><span class="token punctuation">:</span> <span class="token number">1000</span>    <span class="token comment"># 用于测试过程 NMS操作之后留下的Proposals数目</span>    <span class="token key atrule">POST_NMS_TOP_N_TEST</span><span class="token punctuation">:</span> <span class="token number">1000</span>    <span class="token key atrule">FPN_POST_NMS_TOP_N_TEST</span><span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token comment"># ROI_HEADS配置</span>  <span class="token key atrule">ROI_HEADS</span><span class="token punctuation">:</span>    <span class="token comment"># 是否使用FPN</span>    <span class="token key atrule">USE_FPN</span><span class="token punctuation">:</span> <span class="token boolean important">True</span><span class="token comment"># class分类和bounding box回归分支</span>  <span class="token key atrule">ROI_BOX_HEAD</span><span class="token punctuation">:</span>    <span class="token comment"># ROI Align处理之后所生成的维度</span>    <span class="token key atrule">POOLER_RESOLUTION</span><span class="token punctuation">:</span> <span class="token number">7</span>    <span class="token comment"># 下面这几个参数还没搞明白 后续再补上~</span>    <span class="token key atrule">POOLER_SCALES</span><span class="token punctuation">:</span> (0.25<span class="token punctuation">,</span> <span class="token number">0.125</span><span class="token punctuation">,</span> <span class="token number">0.0625</span><span class="token punctuation">,</span> 0.03125)    <span class="token key atrule">POOLER_SAMPLING_RATIO</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token comment"># 特征提取器（对ROI Align之后的结果进行特征提取）</span>    <span class="token key atrule">FEATURE_EXTRACTOR</span><span class="token punctuation">:</span> <span class="token string">"FPN2MLPFeatureExtractor"</span>    <span class="token comment"># 预测器 （主要是使用全连接层进行 分类和回归）</span>    <span class="token key atrule">PREDICTOR</span><span class="token punctuation">:</span> <span class="token string">"FPNPredictor"</span>  <span class="token comment"># mask分割的分支</span>  <span class="token key atrule">ROI_MASK_HEAD</span><span class="token punctuation">:</span>    <span class="token comment"># 下面这几个参数还没搞明白 后续再补上~</span>    <span class="token key atrule">POOLER_SCALES</span><span class="token punctuation">:</span> (0.25<span class="token punctuation">,</span> <span class="token number">0.125</span><span class="token punctuation">,</span> <span class="token number">0.0625</span><span class="token punctuation">,</span> 0.03125)    <span class="token comment"># 特征提取器（对ROI Align之后的结果进行特征提取）</span>    <span class="token key atrule">FEATURE_EXTRACTOR</span><span class="token punctuation">:</span> <span class="token string">"MaskRCNNFPNFeatureExtractor"</span>    <span class="token comment"># 预测器 （主要是生成mask）</span>    <span class="token key atrule">PREDICTOR</span><span class="token punctuation">:</span> <span class="token string">"MaskRCNNC4Predictor"</span>    <span class="token comment"># 下面这几个参数还没搞明白 后续再补上~</span>    <span class="token key atrule">POOLER_RESOLUTION</span><span class="token punctuation">:</span> <span class="token number">14</span>    <span class="token key atrule">POOLER_SAMPLING_RATIO</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token key atrule">RESOLUTION</span><span class="token punctuation">:</span> <span class="token number">28</span>    <span class="token comment"># 是否使用ROI BOX HEAD特征提取器提取好的特征</span>    <span class="token key atrule">SHARE_BOX_FEATURE_EXTRACTOR</span><span class="token punctuation">:</span> <span class="token boolean important">False</span>  <span class="token key atrule">MASK_ON</span><span class="token punctuation">:</span> <span class="token boolean important">True</span> <span class="token comment"># 数据集的名称</span><span class="token key atrule">DATASETS</span><span class="token punctuation">:</span>  <span class="token key atrule">TRAIN</span><span class="token punctuation">:</span> ("coco_2014_train"<span class="token punctuation">,</span> "coco_2014_valminusminival")  <span class="token key atrule">TEST</span><span class="token punctuation">:</span> ("coco_2014_minival"<span class="token punctuation">,</span>) <span class="token comment"># 数据集的Dataloader配置（用来读取数据集）</span><span class="token key atrule">DATALOADER</span><span class="token punctuation">:</span>  <span class="token key atrule">SIZE_DIVISIBILITY</span><span class="token punctuation">:</span> <span class="token number">32</span> <span class="token comment"># 相关训练参数配置</span><span class="token key atrule">SOLVER</span><span class="token punctuation">:</span>  <span class="token key atrule">BASE_LR</span><span class="token punctuation">:</span> <span class="token number">0.02</span>  <span class="token key atrule">WEIGHT_DECAY</span><span class="token punctuation">:</span> <span class="token number">0.0001</span>  <span class="token key atrule">STEPS</span><span class="token punctuation">:</span> (60000<span class="token punctuation">,</span> 80000)  <span class="token key atrule">MAX_ITER</span><span class="token punctuation">:</span> <span class="token number">90000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>整体的GeneralizedRCNN 结构如下图所示（绘画水平有限orz），可以依照下图的模块去看相应的配置，需要配置的模块主要是：<strong>Backbone、RPN、ROI Heads(包括ROI Box head 和 ROI Mask head)</strong> 。</p></blockquote><p><img src="GeneralizedRCNN%E7%BB%93%E6%9E%84%E5%9B%BE.jpg" alt="图1 GeneralizedRCNN结构图"></p><h3 id="二、配置文件的使用"><a href="#二、配置文件的使用" class="headerlink" title="二、配置文件的使用"></a>二、配置文件的使用</h3><blockquote><p>​        配置文件主要是在your_project/tools/train_net.py中进行调用,首先看到train_net.py中的main函数:</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"PyTorch Object Detection Training"</span><span class="token punctuation">)</span>        <span class="token comment"># 配置文件(带有.yaml后缀的配置文件作为命令行参数输入)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>        <span class="token string">"--config-file"</span><span class="token punctuation">,</span>        default<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>        metavar<span class="token operator">=</span><span class="token string">"FILE"</span><span class="token punctuation">,</span>        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"path to config file"</span><span class="token punctuation">,</span>        <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 将配置文件进行读取</span>    cfg<span class="token punctuation">.</span>merge_from_file<span class="token punctuation">(</span>args<span class="token punctuation">.</span>config_file<span class="token punctuation">)</span>    cfg<span class="token punctuation">.</span>merge_from_list<span class="token punctuation">(</span>args<span class="token punctuation">.</span>opts<span class="token punctuation">)</span>    cfg<span class="token punctuation">.</span>freeze<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment"># 将配置对象 cfg 作为参数传入train()函数</span>    model <span class="token operator">=</span> train<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> args<span class="token punctuation">.</span>local_rank<span class="token punctuation">,</span> args<span class="token punctuation">.</span>distributed<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>接着我们在train_net.py中找到train()函数:</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> local_rank<span class="token punctuation">,</span> distributed<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 根据配置文件来创建模型 (发现cfg被传到了build_detection_model()函数中)</span>    model <span class="token operator">=</span> build_detection_model<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span>    device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>DEVICE<span class="token punctuation">)</span>    model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>​        cfg对象传入到了build_detection_model()函数中，这应该是一个利用配置来构建模型的函数，我们来看看这个函数里面都写了些啥：</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>generalized_rcnn <span class="token keyword">import</span> GeneralizedRCNN <span class="token comment"># 一个字典</span>_DETECTION_META_ARCHITECTURES <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"GeneralizedRCNN"</span><span class="token punctuation">:</span> GeneralizedRCNN<span class="token punctuation">}</span>  <span class="token keyword">def</span> <span class="token function">build_detection_model</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 默认的cfg.MODEL.META_ARCHITECTURE都是GeneralizedRCNN</span>    meta_arch <span class="token operator">=</span> _DETECTION_META_ARCHITECTURES<span class="token punctuation">[</span>cfg<span class="token punctuation">.</span>MODEL<span class="token punctuation">.</span>META_ARCHITECTURE<span class="token punctuation">]</span>    <span class="token comment"># 相当于 return GeneralizedRCNN(cfg)</span>    <span class="token keyword">return</span> meta_arch<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其实可以看出build_detection_model()函数就是将cfg对象又作为参数，传到了GeneralizedRCNN类的init函数中，返回一个GeneralizedRCNN类对象，这个对象就是我们所定义的模型。</p><p>那么GeneraliziedRCNN类中究竟执行了哪些过程呢？它如何构建我们的Mask-RCNN模型的？</p><p>请阅读：maskrcnn-benchmark-master（二）：GeneraliziedRCNN类</p><p>码字不易，未经许可，请勿随意转载！</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> MaskRCNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maskrcnn-benckmark-master （零）：代码解读</title>
      <link href="/2022/05/27/maskrcnn-benckmark-master-ling-dai-ma-jie-du/"/>
      <url>/2022/05/27/maskrcnn-benckmark-master-ling-dai-ma-jie-du/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>之前一直都有使用Mask-RCNN模型，从一开始使用的MMDetection2框架中的Mask-RCNN，能够比较正常的运行，但是想要修改成我需要的形式时，发现MMDetection2中有一些地方都已经模块化好了，不方便修改，于是便转战到现在的maskrcnn-benckmark-master这个版本。</p><p>前段时间是有把maskrcnn-benckmark-master都阅读一遍，并按照了自己的需求修改了网络结构，但是现在又要修改其他部分，发现关于代码细节，我以及记不得太清楚了orz。想到好久都没有更新博客了，于是便决定记录一下第二次学习这个代码的过程，希望对同样想学习相关代码的朋友有所帮助，如果有理解有误的地方，还请评论区拍砖~</p></blockquote><h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><blockquote><p>因为本系列的文章是介绍maskrcnn-benchmark-master的网络构建的一些代码，方便根据这个项目将其修改成自己所需要的形式，所以在阅读本系列文章时，需要提前对Faster-RCNN、Mask-RCNN模型本身的一些细节有一个大致的了解，并默认读者已经能自行将maskrnn-benchmark-master相关环境配置好。</p></blockquote><p>推荐Faster-RCNN学习：<a href="https://zhuanlan.zhihu.com/p/31426458">https://zhuanlan.zhihu.com/p/31426458</a></p><p>推荐Mask-RCNN学习：<a href="https://zhuanlan.zhihu.com/p/37998710">https://zhuanlan.zhihu.com/p/37998710</a></p><blockquote><p>如下是我已经写好的文章（更新了再补充）：</p><p>maskrcnn-benckmark-master（一）：配置文件</p><p>maskrcnn-benckmark-master（二）：GeneralizedRCNN类</p><p>maskrcnn-benckmark-master（三）：build_backbone()函数</p><p>maskrcnn-benchmark-master（四）：build_rpn()函数</p><p>maskrcnn-benchmark-master（五）：RPN的inference文件</p><p>maskrcnn-benchmark-master（六）：RPN的loss文件</p></blockquote><p>待续~</p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> MaskRCNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2022/05/27/di-yi-pian-bo-ke/"/>
      <url>/2022/05/27/di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre class="line-numbers language-none"><code class="language-none">这是我使用hexo搭建的博客，我开始写的一个博客！全新的开始~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/27/hello-world/"/>
      <url>/2022/05/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
